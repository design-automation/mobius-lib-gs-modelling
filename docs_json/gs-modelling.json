{
	"id": 0,
	"name": "gs-modelling",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "\"attrib\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/attrib.ts",
			"children": [
				{
					"id": 16,
					"name": "Create",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 17,
							"name": "Create",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds an attribute to a model",
								"returns": "New attribute\n"
							},
							"parameters": [
								{
									"id": 18,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to add to"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 19,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Name of new attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 20,
									"name": "geom_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Data type for attribute values. (number, string, boolean, number[], string[], boolean[])"
									},
									"type": {
										"type": "reference",
										"name": "EGeomType"
									}
								},
								{
									"id": 21,
									"name": "data_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EDataType"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IAttrib"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 66,
							"character": 22
						}
					]
				},
				{
					"id": 2,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets attribute that apply for a specified geometry type from a model",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 4,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 5,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The attribute name"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6,
									"name": "geom_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Type of geometry to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "EGeomType"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IAttrib"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 18,
							"character": 19
						}
					]
				},
				{
					"id": 22,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 23,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes an attribute",
								"returns": "True if successful\n"
							},
							"parameters": [
								{
									"id": 24,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute to delete"
									},
									"type": {
										"type": "reference",
										"name": "IAttrib"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 85,
							"character": 19
						}
					]
				},
				{
					"id": 7,
					"name": "getAll",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 8,
							"name": "getAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all entity attribs",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 9,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IAttrib"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 32,
							"character": 22
						}
					]
				},
				{
					"id": 10,
					"name": "getAllEnts",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 11,
							"name": "getAllEnts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all entity attribs",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 12,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IAttrib"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 41,
							"character": 26
						}
					]
				},
				{
					"id": 13,
					"name": "getAllTopos",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 14,
							"name": "getAllTopos",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all topo attribs",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 15,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IAttrib"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 50,
							"character": 27
						}
					]
				},
				{
					"id": 32,
					"name": "getEntValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 33,
							"name": "getEntValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the value of a ent attribute for a specified geometry",
								"returns": "Value of attribute\n"
							},
							"parameters": [
								{
									"id": 34,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "IEntAttrib"
									}
								},
								{
									"id": 35,
									"name": "ent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 116,
							"character": 27
						}
					]
				},
				{
					"id": 25,
					"name": "getName",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 26,
							"name": "getName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the name of an attribute",
								"returns": "Name of specified attribute\n"
							},
							"parameters": [
								{
									"id": 27,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute to get name of"
									},
									"type": {
										"type": "reference",
										"name": "IAttrib"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 94,
							"character": 23
						}
					]
				},
				{
					"id": 41,
					"name": "getTopoValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 42,
							"name": "getTopoValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the value of a topo attribute for a specified geometry",
								"returns": "Value of attribute\n"
							},
							"parameters": [
								{
									"id": 43,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "ITopoAttrib"
									}
								},
								{
									"id": 44,
									"name": "topo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "reference",
										"name": "ITopo"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 137,
							"character": 28
						}
					]
				},
				{
					"id": 36,
					"name": "setEntValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 37,
							"name": "setEntValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the value of a ent attribute for a specified geometry",
								"returns": "Old value of specified attribute\n"
							},
							"parameters": [
								{
									"id": 38,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "IEntAttrib"
									}
								},
								{
									"id": 39,
									"name": "ent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											}
										]
									}
								},
								{
									"id": 40,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "New value of attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 127,
							"character": 27
						}
					]
				},
				{
					"id": 28,
					"name": "setName",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 29,
							"name": "setName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the name of an attribute",
								"returns": "Old name of specified attribute\n"
							},
							"parameters": [
								{
									"id": 30,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute to set name"
									},
									"type": {
										"type": "reference",
										"name": "IAttrib"
									}
								},
								{
									"id": 31,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "New name of attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 104,
							"character": 23
						}
					]
				},
				{
					"id": 45,
					"name": "setTopoValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 46,
							"name": "setTopoValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the value of a topo attribute for a specified geometry",
								"returns": "Old value of specified attribute\n"
							},
							"parameters": [
								{
									"id": 47,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "ITopoAttrib"
									}
								},
								{
									"id": 48,
									"name": "topo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "reference",
										"name": "ITopo"
									}
								},
								{
									"id": 49,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "New value of attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 148,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						16,
						2,
						22,
						7,
						10,
						13,
						32,
						25,
						41,
						36,
						28,
						45
					]
				}
			],
			"sources": [
				{
					"fileName": "attrib.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 50,
			"name": "\"calc\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/calc.ts",
			"comment": {
				"shortText": "Function for doing various geometric calculations."
			},
			"children": [
				{
					"id": 51,
					"name": "distBetweenPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 52,
							"name": "distBetweenPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculate the distance between two points.",
								"returns": "The distance.\n"
							},
							"parameters": [
								{
									"id": 53,
									"name": "point1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The first point."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 54,
									"name": "point2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The second point."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 23,
							"character": 33
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						51
					]
				}
			],
			"sources": [
				{
					"fileName": "calc.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 55,
			"name": "\"circle\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/circle.ts",
			"comment": {
				"shortText": "Functions for working with circles.\nCircles are geometric objects definded by a single vertex and a set of parameters.\nThe circle object can be either a closed circle or an open arc."
			},
			"children": [
				{
					"id": 60,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 61,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of a circle object.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 62,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The circle object to copy."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 63,
									"name": "copy_attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "If true, attributes are copied to the new circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 52,
							"character": 20
						}
					]
				},
				{
					"id": 64,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 65,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies a circle from one model into another model.",
								"returns": "The copied circle object in the model.\n"
							},
							"parameters": [
								{
									"id": 66,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The model to copy to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 67,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The circle object to copy."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 66,
							"character": 27
						}
					]
				},
				{
					"id": 74,
					"name": "FromOrigin2Points",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 75,
							"name": "FromOrigin2Points",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a circle at the origin point parallel to a plane that passes through two other points.\nThe radius will be equal to the distance from the origin to point1.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at point1 in an anti-clockwise direction.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 76,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the center of the circle."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 77,
									"name": "point1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, on the circle perimeter, and defining teh x-axis of the plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 78,
									"name": "point2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, on the plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 79,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 110,
							"character": 33
						}
					]
				},
				{
					"id": 68,
					"name": "FromOrigin2Vectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 69,
							"name": "FromOrigin2Vectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a circle from an origin point parallel to a plane defined by the two X and Y vectors.\nThe radius will be equal to the length of the X vector.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at the x-axis in an anti-clockwise direction.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 70,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the center of the circle."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 71,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "X-axis of the circle plane. (The length of the vecor described the radius.)"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 72,
									"name": "vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector on the circle plane."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 73,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 91,
							"character": 34
						}
					]
				},
				{
					"id": 80,
					"name": "FromOriginXY",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 81,
							"name": "FromOriginXY",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a circle at the origin point parallel to the WCS XY plane, with the specified radius.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at point1 in an anti-clockwise direction.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 82,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the center of the circle."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 83,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 84,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 130,
							"character": 28
						}
					]
				},
				{
					"id": 85,
					"name": "FromOriginYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 86,
							"name": "FromOriginYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a circle at the origin point parallel to the WCS YZ plane, with the specified radius.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at point1 in an anti-clockwise direction.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 87,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the center of the circle."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 88,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 89,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 149,
							"character": 28
						}
					]
				},
				{
					"id": 90,
					"name": "FromOriginZX",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 91,
							"name": "FromOriginZX",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a circle at the origin point parallel to the WCS ZX plane, with the specified radius.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at point1 in an anti-clockwise direction.",
								"returns": "New circle (or arc).\n"
							},
							"parameters": [
								{
									"id": 92,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the center of the circle."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 93,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 94,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 168,
							"character": 28
						}
					]
				},
				{
					"id": 95,
					"name": "FromPlane",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 96,
							"name": "FromPlane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a circle from a plane, with the specified radius.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at point1 in an anti-clockwise direction.",
								"returns": "New circle object.\n"
							},
							"parameters": [
								{
									"id": 97,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plane object to construct circle on."
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 98,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 99,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 187,
							"character": 25
						}
					]
				},
				{
					"id": 56,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 57,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a circle from the model based on an ID number.\nIn the viewer, the object label can display (it starts with 'o'), which contains the ID.\nFor example, if the label is \"o123\", then the ID is the number 123.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 58,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get circle object from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 59,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID number of circle object."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 34,
							"character": 19
						}
					]
				},
				{
					"id": 119,
					"name": "calcLength",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 120,
							"name": "calcLength",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the perimeter length of a circle.\nIf the circle is an open arc, then the length of the arc is returned.",
								"returns": "Length of circle\n"
							},
							"parameters": [
								{
									"id": 121,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to calculate length from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 281,
							"character": 26
						}
					]
				},
				{
					"id": 116,
					"name": "close",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 117,
							"name": "close",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Closes the arc, so that it becomes a circle.",
								"returns": "True if the open circle was closed, false if the circle was already closed.\n"
							},
							"parameters": [
								{
									"id": 118,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to close."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 263,
							"character": 21
						}
					]
				},
				{
					"id": 106,
					"name": "getArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 107,
							"name": "getArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the arc angles of the circle.",
								"returns": "The angles, or null if it is a closed circle.\n"
							},
							"parameters": [
								{
									"id": 108,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to get angles from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 228,
							"character": 28
						}
					]
				},
				{
					"id": 103,
					"name": "getAxes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 104,
							"name": "getAxes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the X and Y vectors of the circle plane. The circle radius is equal to the length of the X vector.",
								"returns": "Two vectors, the X and Y vectors of teh circle plane.\n"
							},
							"parameters": [
								{
									"id": 105,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to get vectors from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "gs.XYZ"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 217,
							"character": 23
						}
					]
				},
				{
					"id": 100,
					"name": "getOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 101,
							"name": "getOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the origin of the circle.",
								"returns": "Point object, the origin of teh circle.\n"
							},
							"parameters": [
								{
									"id": 102,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle objject to obtain origin from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 206,
							"character": 25
						}
					]
				},
				{
					"id": 113,
					"name": "isClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 114,
							"name": "isClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a circle object is closed. If it is not closed, then it must be an arc.",
								"returns": "True if the circle is closed.\n"
							},
							"parameters": [
								{
									"id": 115,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to test."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 252,
							"character": 24
						}
					]
				},
				{
					"id": 109,
					"name": "setArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 110,
							"name": "setArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the angles for the arc."
							},
							"parameters": [
								{
									"id": 111,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to set angles for."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 112,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The angles to set, two numbers between 0 and 360. If null, then the circle is closed.\n"
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 239,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						60,
						64,
						74,
						68,
						80,
						85,
						90,
						95,
						56,
						119,
						116,
						106,
						103,
						100,
						113,
						109
					]
				}
			],
			"sources": [
				{
					"fileName": "circle.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 122,
			"name": "\"ellipse\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/ellipse.ts",
			"children": [
				{
					"id": 148,
					"name": "ArcFromOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 149,
							"name": "ArcFromOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed ellipse to the model based on an origin point and radius",
								"text": "Arc will be constructed parallel to the world XY plane with the specifed origin point as the center\npoint of the arc",
								"returns": "New ellipse if successful\n"
							},
							"parameters": [
								{
									"id": 150,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Center point of arc"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 151,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 152,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 153,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 102,
							"character": 29
						}
					]
				},
				{
					"id": 142,
					"name": "ArcFromOriginVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 143,
							"name": "ArcFromOriginVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a ellipse from an origin point and two direction vectors describing the x and y axis",
								"returns": "New ellipse if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 144,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 145,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing x-axis of plane, and the x radius"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 146,
									"name": "vec_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing x-axis of plane, and the y radius"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 147,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, for start and end of arc."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 87,
							"character": 36
						}
					]
				},
				{
					"id": 154,
					"name": "ArcFromPlane",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 155,
							"name": "ArcFromPlane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a circular arc to the model based on a plane and radius",
								"text": "Arc will be constructed parallel to the plane with the origin of the plane as the center point of the\nellipse that forms the arc<br/>\nArc will be constructed starting from the x-axis of the specified plane and follows the ellipse in the\nspecified direction until it reaches the angle specified",
								"returns": "New arc  (ellipse) if successful\n"
							},
							"parameters": [
								{
									"id": 156,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plane to construct arc on"
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 157,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 158,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 159,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, for start and end of arc."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 120,
							"character": 28
						}
					]
				},
				{
					"id": 132,
					"name": "FromOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 133,
							"name": "FromOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed ellipse to the model based on an origin point and radius",
								"text": "Ellipse will be constructed parallel to the world XY plane with the specifed origin point as the center\npoint of the ellipse",
								"returns": "New ellipse if successful\n"
							},
							"parameters": [
								{
									"id": 134,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Center point of ellipse"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 135,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 136,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 54,
							"character": 26
						}
					]
				},
				{
					"id": 127,
					"name": "FromOriginVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 128,
							"name": "FromOriginVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a ellipse from an origin point and two direction vectors describing the x and y axis",
								"returns": "New ellipse if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 129,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 130,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing x-axis of plane, and the radius"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 131,
									"name": "vec_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Direction vector describing y-axis of plane"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 40,
							"character": 33
						}
					]
				},
				{
					"id": 137,
					"name": "FromPlane",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 138,
							"name": "FromPlane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed ellipse to the model based on a plane and radius",
								"text": "Ellipse will be constructed parallel to the plane with the origin of the plane as the center point of the\nellipse",
								"returns": "New ellipse if successful\n"
							},
							"parameters": [
								{
									"id": 139,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plane to construct ellipse on"
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 140,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 141,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 68,
							"character": 25
						}
					]
				},
				{
					"id": 123,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 124,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a ellipse from the model based on an index number",
								"returns": "Ellipse object if successful\n"
							},
							"parameters": [
								{
									"id": 125,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get ellipse from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 126,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 20,
							"character": 19
						}
					]
				},
				{
					"id": 176,
					"name": "close",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 177,
							"name": "close",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Closes the arc, so that it becomes a ellipse.",
								"returns": "True if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 178,
									"name": "arc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to set value for"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 192,
							"character": 21
						}
					]
				},
				{
					"id": 166,
					"name": "getArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 167,
							"name": "getArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the angles for the arc. If this object was previously a closed ellipse, it will now become an open arc.",
								"returns": "The angles, or null.\n"
							},
							"parameters": [
								{
									"id": 168,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to get angles from."
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 158,
							"character": 28
						}
					]
				},
				{
					"id": 163,
					"name": "getAxes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 164,
							"name": "getAxes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the x and y vectors of a Ellipse",
								"text": "Direction of x and y vectors reflect the x and y axis of the underlying ellipse or ellipse of the ellipse<br/>\nMagnitude of x and y vectors reflect the x and y radius of the underlying ellipse or ellipse of the ellipse",
								"returns": "List of x and y vectors of a Ellipse\n"
							},
							"parameters": [
								{
									"id": 165,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to obtain vectors from"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "gs.XYZ"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 148,
							"character": 23
						}
					]
				},
				{
					"id": 160,
					"name": "getOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 161,
							"name": "getOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the origin of a Ellipse",
								"returns": "Origin point of Ellipse\n"
							},
							"parameters": [
								{
									"id": 162,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to obtain origin from"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 136,
							"character": 25
						}
					]
				},
				{
					"id": 173,
					"name": "isClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 174,
							"name": "isClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a Ellipse is closed. If it is not closed, then it must be an arc.",
								"returns": "True if Ellipse is closed\n"
							},
							"parameters": [
								{
									"id": 175,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to test"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 182,
							"character": 24
						}
					]
				},
				{
					"id": 179,
					"name": "length",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 180,
							"name": "length",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the length of a Ellipse",
								"text": "If specified ellipse is a closed ellipse or ellipse, returns the circumference of the ellipse or ellipse",
								"returns": "Length of ellipse\n"
							},
							"parameters": [
								{
									"id": 181,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to obtain length from"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 207,
							"character": 22
						}
					]
				},
				{
					"id": 169,
					"name": "setArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 170,
							"name": "setArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the angles for the arc. If this object was previously a closed ellipse, it will now become an open arc.",
								"returns": "True if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 171,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to set value for"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								},
								{
									"id": 172,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The value to set"
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 169,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						148,
						142,
						154,
						132,
						127,
						137,
						123,
						176,
						166,
						163,
						160,
						173,
						179,
						169
					]
				}
			],
			"sources": [
				{
					"fileName": "ellipse.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 182,
			"name": "\"entity\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/entity.ts",
			"children": [
				{
					"id": 183,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 184,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of an entity.",
								"returns": "Copy\n"
							},
							"parameters": [
								{
									"id": 185,
									"name": "entity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "reference",
										"name": "IEnt"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEnt"
							}
						}
					],
					"sources": [
						{
							"fileName": "entity.ts",
							"line": 18,
							"character": 20
						}
					]
				},
				{
					"id": 186,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 187,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes geometry or a list of geometry from the model",
								"text": "Affects geometry that contains or is based off specified geometry",
								"returns": "Number of items deleted if successful\n"
							},
							"parameters": [
								{
									"id": 188,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IEnt"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IEnt"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "entity.ts",
							"line": 36,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						183,
						186
					]
				}
			],
			"sources": [
				{
					"fileName": "entity.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 189,
			"name": "\"examples\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/examples.ts",
			"comment": {
				"shortText": "These functions call examples for mobius."
			},
			"children": [
				{
					"id": 190,
					"name": "getTorus",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 191,
							"name": "getTorus",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a model containing a torus with two holes.",
								"returns": "The model.\n"
							},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "examples.ts",
							"line": 15,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						190
					]
				}
			],
			"sources": [
				{
					"fileName": "examples.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 192,
			"name": "\"group\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/group.ts",
			"comment": {
				"shortText": "Functions for working with groups."
			},
			"children": [
				{
					"id": 196,
					"name": "Create",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 197,
							"name": "Create",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new group.",
								"returns": "Ture if the group was successfully created.\n"
							},
							"parameters": [
								{
									"id": 198,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to create group in."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 199,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 41,
							"character": 22
						}
					]
				},
				{
					"id": 200,
					"name": "Creates",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 201,
							"name": "Creates",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a set of new groups.",
								"returns": "Ture if all groups were successfully created.\n"
							},
							"parameters": [
								{
									"id": 202,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to create groups in."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 203,
									"name": "names",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 55,
							"character": 23
						}
					]
				},
				{
					"id": 193,
					"name": "GetNames",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 194,
							"name": "GetNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the names of all the groups in the model.",
								"returns": "List of group names\n"
							},
							"parameters": [
								{
									"id": 195,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get group names from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 26,
							"character": 24
						}
					]
				},
				{
					"id": 204,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 205,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes a group from the model.",
								"returns": "True if the group was successfully deleted.\n"
							},
							"parameters": [
								{
									"id": 206,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model containing the groups."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 207,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group name to delete."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 208,
									"name": "delete_geom",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "If true, the objects and points in teh group will be deleted."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 77,
							"character": 19
						}
					]
				},
				{
					"id": 209,
					"name": "getParent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 210,
							"name": "getParent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the parent of a group.\nReturns null if specified group does not have a parent group.",
								"returns": "Parent group of specified group if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 211,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model containing the groups."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 212,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group name to get parent for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 95,
							"character": 25
						}
					]
				},
				{
					"id": 213,
					"name": "setParent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 214,
							"name": "setParent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the parent of a group.",
								"returns": "The old parent.\n"
							},
							"parameters": [
								{
									"id": 215,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model containing the groups."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 216,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group name to set parent for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 217,
									"name": "parent_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group name of parent."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 109,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						196,
						200,
						193,
						204,
						209,
						213
					]
				}
			],
			"sources": [
				{
					"fileName": "group.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 218,
			"name": "\"intersect\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/intersect.ts",
			"comment": {
				"shortText": "Function for intersecting geometric objects."
			},
			"children": [
				{
					"id": 219,
					"name": "circleCircle2D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 220,
							"name": "circleCircle2D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the intersection points and/or overlapping arcs of two intersecting co-planar conic curves",
								"text": "List of points returned is in order (starts from t=0 to t=1 of curve_1)<br/>\nConic curves must lie on the same plane<br/>\nReturns null if conic curves are not co-planar<br/>\nReturns null if conic curves do not intersect",
								"returns": "List of intersection points and/or overlapping arcs if successful,\n         null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 221,
									"name": "circle1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Conic curve 1"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 222,
									"name": "circle2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Conic curve 2"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "intersect.ts",
							"line": 33,
							"character": 30
						}
					]
				},
				{
					"id": 223,
					"name": "circlePlane3D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 224,
							"name": "circlePlane3D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "List of intersection points and/or overlapping arcs if successful,\n         null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 225,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Conic curve 1"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 226,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Conic curve 2"
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "intersect.ts",
							"line": 46,
							"character": 29
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						219,
						223
					]
				}
			],
			"sources": [
				{
					"fileName": "intersect.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 227,
			"name": "\"list\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/list.ts",
			"children": [
				{
					"id": 228,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 229,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new list by making a copy of an existing list.",
								"returns": "New duplicated list.\n\n<h3>Example:</h3>\n<code>\nlist = [1,2,3]<br/>\ncopy = List.Copy(list)</code><br/><br/>\nExpected value of copy is [1,2,3].\n"
							},
							"parameters": [
								{
									"id": 230,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to copy."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 33,
							"character": 20
						}
					]
				},
				{
					"id": 231,
					"name": "FromRange",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 232,
							"name": "FromRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new list of integer numbers between two bounds.\nLower bound is inclusive and upper bound is exclusive.",
								"returns": "New list.\n\n<h3>Example: </h3>\n<code>\nlist = List.FromRange(0,5)</code><br/><br/>\nExpected value of list is [0,1,2,3,4].\n"
							},
							"parameters": [
								{
									"id": 233,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Lower bound integer."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 234,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Upper bound integer."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 51,
							"character": 25
						}
					]
				},
				{
					"id": 238,
					"name": "append",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 239,
							"name": "append",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds an item to the end of a list.\nIf item is a list, the entire list will be appended as one item.",
								"returns": "New list with added item.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nappend = List.append(list,4)</code><br/><br/>\nExpected value of list is [1,2,3,4].\n"
							},
							"parameters": [
								{
									"id": 240,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 241,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Item to add."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 92,
							"character": 22
						}
					]
				},
				{
					"id": 242,
					"name": "appendFront",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 243,
							"name": "appendFront",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds an item to the front of a list.\nIf the item is a list, the entire list will be appended as one item.",
								"returns": "New list with added item.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nappend = List.appendFront(list,4)</code><br/><br/>\nExpected value of list is [4,1,2,3].\n"
							},
							"parameters": [
								{
									"id": 244,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 245,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Item to add."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 114,
							"character": 27
						}
					]
				},
				{
					"id": 246,
					"name": "extend",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 247,
							"name": "extend",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds items (from a list) to the end of an list.\nItems are added to list individually as seperate items.",
								"returns": "List with added items.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nlist2 = [9,0]<br/>\nextend = List.extend(list,list2)</code><br/><br/>\nExpected value of extend is [1,2,3,9,0].\n"
							},
							"parameters": [
								{
									"id": 248,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 249,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of items to add."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 137,
							"character": 22
						}
					]
				},
				{
					"id": 250,
					"name": "extendFront",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 251,
							"name": "extendFront",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds items (from a list) to the front of an list.\nItems are added to list individually as seperate items.",
								"returns": "List with added items.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nlist2 = [9,0]<br/>\nextend = List.extend(list,list2)</code><br/><br/>\nExpected value of extend is [9,0,1,2,3].\n"
							},
							"parameters": [
								{
									"id": 252,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 253,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of items to add."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 158,
							"character": 27
						}
					]
				},
				{
					"id": 254,
					"name": "flatten",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 255,
							"name": "flatten",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Flattens an n-dimensional list into a one-dimensional list.",
								"returns": "Flattened list.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3,[4,5]]<br/>\nflatten = List.flatten(list)</code><br/><br/>\nExpected value of list is [1,2,3,4,5].\n"
							},
							"parameters": [
								{
									"id": 256,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to flatten."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 176,
							"character": 23
						}
					]
				},
				{
					"id": 235,
					"name": "len",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 236,
							"name": "len",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of items in an list.",
								"returns": "Length of the list.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nlen = List.len(list)</code><br/><br/>\nExpected value of len is 3.\n"
							},
							"parameters": [
								{
									"id": 237,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 73,
							"character": 19
						}
					]
				},
				{
					"id": 257,
					"name": "removeIndex",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 258,
							"name": "removeIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the item at the specified index from a list.",
								"returns": "List with item removed.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nremove = List.removeIndex(list,1)</code><br/><br/>\nExpected value of list is [1,3].\n"
							},
							"parameters": [
								{
									"id": 259,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to remove item from."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 260,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index number of item to remove."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 194,
							"character": 27
						}
					]
				},
				{
					"id": 261,
					"name": "removeValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 262,
							"name": "removeValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes items that match specified value from a list.\nItems must match both the value and type of specified value<br/>",
								"text": "Returns original list if no items in list match specified value.\n",
								"returns": "List with item removed\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,2,3]<br/>\nremove = List.removeValue(list,2,true)</code><br/><br/>\nExpected value of list is [1,3].\n"
							},
							"parameters": [
								{
									"id": 263,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to remove item from."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 264,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Value to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 265,
									"name": "remove_all",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Removes all instances of specified value if true, removes only the first instance if\n     false."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 220,
							"character": 27
						}
					]
				},
				{
					"id": 266,
					"name": "reverse",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 267,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverses the order of items in an list.",
								"returns": "New reversed list.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nresult = List.reverse(list)</code><br/><br/>\nExpected value of result is [3,2,1].\n"
							},
							"parameters": [
								{
									"id": 268,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to reverse."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 245,
							"character": 23
						}
					]
				},
				{
					"id": 275,
					"name": "slice",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 276,
							"name": "slice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a copy of a portion of a list, from start index to end index (end not included).",
								"returns": "A new list.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3,4,5]<br/>\nresult = List.slice(list,1,3)</code><br/><br/>\nExpected value of result is [2,3].\n"
							},
							"parameters": [
								{
									"id": 277,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to slice."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 278,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index at which to begin slicing.\n     A negative index can be used, indicating an offset from the end of the sequence.\n     If start is undefined, slice begins from index 0."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 279,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index before which to end slicing. Slice extracts up to but not including end.\n     A negative index can be used, indicating an offset from the end of the sequence.\n     If end is undefined, slice extracts through the end of the sequence."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 313,
							"character": 21
						}
					]
				},
				{
					"id": 269,
					"name": "sortAlpha",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 270,
							"name": "sortAlpha",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts a list of strings alphabetically.\nIf items are not strings, they are treated as strings.<br/>",
								"text": "Items are sorted according to string Unicode code points (character by character, numbers before upper case\nalphabets, upper case alphabets before lower case alphabets)\n",
								"returns": "New sorted list.\n\n<h3>Example: </h3>\n<code>\nlist = [\"1\",\"2\",\"10\",\"Orange\",\"apple\"]<br/>\nsort = List.sortAlpha(list)</code><br/><br/>\nExpected value of list is [\"1\",\"10\",\"2\",\"Orange\",\"apple\"].\n"
							},
							"parameters": [
								{
									"id": 271,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to sort."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 268,
							"character": 25
						}
					]
				},
				{
					"id": 272,
					"name": "sortNum",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 273,
							"name": "sortNum",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts a list of numbers in ascending order.\nThe list must contain numbers.",
								"returns": "New sorted list.\n\n<h3>Example: </h3>\n<code>\nlist = [56,6,48]<br/>\nsort = List.sortNum(list)</code><br/><br/>\nExpected value of list is [6,48,56].\n"
							},
							"parameters": [
								{
									"id": 274,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 288,
							"character": 23
						}
					]
				},
				{
					"id": 280,
					"name": "splice",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 281,
							"name": "splice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds and/or removes items to/from a list.",
								"text": "If no items_to_add are specified, then items are only removed.\nIf num_to_remove is 0, then items are only added.<br/>\n",
								"returns": "A new list.\n\n<h3>Example: </h3>\n<code>\nlist = [10, 20, 30, 40, 50]<br/>\nresult = List.splice(list, 1, 3, [2.2, 3.3])</code><br/><br/>\nExpected value of result is [10, 2.2, 3.2, 50].\n"
							},
							"parameters": [
								{
									"id": 282,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to splice"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 283,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index at which to add/remove items. (Items are added/removed after specified index)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 284,
									"name": "num_to_remove",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number of items to remove."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 285,
									"name": "items_to_add",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of items to add."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 339,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						228,
						231,
						238,
						242,
						246,
						250,
						254,
						235,
						257,
						261,
						266,
						275,
						269,
						272,
						280
					]
				}
			],
			"sources": [
				{
					"fileName": "list.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 286,
			"name": "\"math\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/math.ts",
			"children": [
				{
					"id": 291,
					"name": "NEG_INF",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 292,
							"name": "NEG_INF",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value of negative infinity",
								"returns": "Value of negative infinity\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 29,
							"character": 23
						}
					]
				},
				{
					"id": 287,
					"name": "PI",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 288,
							"name": "PI",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value of PI.",
								"returns": "Value of pi\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 13,
							"character": 18
						}
					]
				},
				{
					"id": 289,
					"name": "POS_INF",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 290,
							"name": "POS_INF",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value of positive infinity",
								"returns": "Value of positive infinity\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 21,
							"character": 23
						}
					]
				},
				{
					"id": 312,
					"name": "abs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 313,
							"name": "abs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the absolute value of a number.",
								"text": "Returns num if num is positive, -num if num is negative and 0 if num=0<br/>\n",
								"returns": "A number representing the absolute value of the specified number.\n\n<h3>Example:</h3>\n<code>\nnum1 = Math.abs(-1.234)\nnum2 = Math.abs(2.345)<br/>\n</code><br/><br/>\nExpected value of num1 is 1.234, and of num2 is 2.345.\n"
							},
							"parameters": [
								{
									"id": 314,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 142,
							"character": 19
						}
					]
				},
				{
					"id": 306,
					"name": "ceiling",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 307,
							"name": "ceiling",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rounds a number up to the nearest integer.",
								"returns": "A number representing the smallest integer more than or equal to the specified number.\n\n<h3>Example:</h3>\n<code>\nnum = Math.ceiling(4.3)</code><br/><br/>\nExpected value of num is 5.\n"
							},
							"parameters": [
								{
									"id": 308,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 104,
							"character": 23
						}
					]
				},
				{
					"id": 293,
					"name": "cos",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 294,
							"name": "cos",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the cosine of a specified angle in degrees.",
								"returns": "Cosine of angle.\n"
							},
							"parameters": [
								{
									"id": 295,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Angle in degrees."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 44,
							"character": 19
						}
					]
				},
				{
					"id": 309,
					"name": "floor",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 310,
							"name": "floor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rounds a number down to the nearest integer.",
								"returns": "A number representing the largest integer less than or equal to the specified number.\n\n<h3>Example:</h3>\n<code>\nnum = Math.floor(4.3)</code><br/><br/>\nExpected value of num is 4.\n"
							},
							"parameters": [
								{
									"id": 311,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 121,
							"character": 21
						}
					]
				},
				{
					"id": 315,
					"name": "max",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 316,
							"name": "max",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the largest number in a list of numbers.",
								"returns": "A number representing the largest number in specified list of numbers.\n\n<h3>Example:</h3>\n<code>\nlist = [8,9,6,1,3]<br/>\nnum = Math.max(list)</code><br/><br/>\nExpected value of num is 9.\n"
							},
							"parameters": [
								{
									"id": 317,
									"name": "nums",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of numbers."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 160,
							"character": 19
						}
					]
				},
				{
					"id": 318,
					"name": "min",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 319,
							"name": "min",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the smallest number in a list of numbers.",
								"returns": "A number representing the smallest number in specified list of numbers.\n\n<h3>Example:</h3>\n<code>\nlist = [8,9,6,1,3]<br/>\nnum = Math.max(list)</code><br/><br/>\nExpected value of num is 1.\n"
							},
							"parameters": [
								{
									"id": 320,
									"name": "nums",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 184,
							"character": 19
						}
					]
				},
				{
					"id": 302,
					"name": "pow",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 303,
							"name": "pow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a number representing the given base taken to the power of the given exponent.",
								"returns": "Number representing the given base taken to the power of the given exponent.\n\n<h3>Example:</h3>\n<code>\nnum = Math.pow(2,3)</code><br/><br/>\nExpected value of num is 8.\n"
							},
							"parameters": [
								{
									"id": 304,
									"name": "base",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Base number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 305,
									"name": "exponent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Power of exponent."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 86,
							"character": 19
						}
					]
				},
				{
					"id": 321,
					"name": "rand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 322,
							"name": "rand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a pseudo-random number between 0 (inclusive) and 1 (exclusive).",
								"returns": "A pseudo-random number.\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 201,
							"character": 20
						}
					]
				},
				{
					"id": 327,
					"name": "randFloat",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 328,
							"name": "randFloat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a pseudo-random floating point number between two numbers.",
								"returns": "A pseudo-random floating point number.\n"
							},
							"parameters": [
								{
									"id": 329,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Lower bound of range."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 330,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Upper bound of range."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 229,
							"character": 25
						}
					]
				},
				{
					"id": 323,
					"name": "randInt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 324,
							"name": "randInt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a pseudo-random integer number between two numbers.",
								"text": "Lower bound number is inclusive and upper bound number is exclusive.",
								"returns": "A pseudo-random integer number.\n"
							},
							"parameters": [
								{
									"id": 325,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Lower bound of range."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 326,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Upper bound of range."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 214,
							"character": 23
						}
					]
				},
				{
					"id": 296,
					"name": "sin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 297,
							"name": "sin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the sine of a specified angle in degrees.",
								"returns": "Sine of angle.\n"
							},
							"parameters": [
								{
									"id": 298,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Angle in degrees."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 56,
							"character": 19
						}
					]
				},
				{
					"id": 299,
					"name": "tan",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 300,
							"name": "tan",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the tangent of a specified angle in degrees.",
								"returns": "Tangent of angle.\n"
							},
							"parameters": [
								{
									"id": 301,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Angle in degrees."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 68,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						291,
						287,
						289,
						312,
						306,
						293,
						309,
						315,
						318,
						302,
						321,
						327,
						323,
						296,
						299
					]
				}
			],
			"sources": [
				{
					"fileName": "math.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 331,
			"name": "\"model\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/model.ts",
			"comment": {
				"shortText": "Functions for working with models.\nModels are datastructures that contain geometric entities with attributes,\npossibly organised into groups."
			},
			"children": [
				{
					"id": 332,
					"name": "New",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 333,
							"name": "New",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new empty model.",
								"returns": "New model empty if successful, null if unsuccessful or on error\n"
							},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "model.ts",
							"line": 24,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						332
					]
				}
			],
			"sources": [
				{
					"fileName": "model.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 334,
			"name": "\"object\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/object.ts",
			"children": [
				{
					"id": 335,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 336,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets an object from the model",
								"returns": "An object. Null if object does not exist.\n"
							},
							"parameters": [
								{
									"id": 337,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get object from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 338,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID of object to get"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IObj"
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 19,
							"character": 19
						}
					]
				},
				{
					"id": 343,
					"name": "GetFromGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 344,
							"name": "GetFromGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all the objects from a group.",
								"returns": "List of objects.\n"
							},
							"parameters": [
								{
									"id": 345,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get the objects from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 346,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The group name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IObj"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 64,
							"character": 28
						}
					]
				},
				{
					"id": 339,
					"name": "Gets",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 340,
							"name": "Gets",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a list of objects from the model.",
								"returns": "A list of objects.\n"
							},
							"parameters": [
								{
									"id": 341,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get objects from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 342,
									"name": "ids",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "A point ID or list of point IDs, integer numbers. If null, then all objects are returned."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IObj"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 47,
							"character": 20
						}
					]
				},
				{
					"id": 351,
					"name": "addToGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 352,
							"name": "addToGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add objects to a group.",
								"returns": "True if all objects we successfully added.\n"
							},
							"parameters": [
								{
									"id": 353,
									"name": "objs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of objects to add."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IObj"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IObj"
												}
											}
										]
									}
								},
								{
									"id": 354,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 110,
							"character": 26
						}
					]
				},
				{
					"id": 347,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 348,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes object or a list of objects from the model.",
								"returns": "True if successful\n"
							},
							"parameters": [
								{
									"id": 349,
									"name": "objs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Object or list of objects to delete."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IObj"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IObj"
												}
											}
										]
									}
								},
								{
									"id": 350,
									"name": "keep_points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "If false, points that are not used in any other objects will be deleted."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 85,
							"character": 19
						}
					]
				},
				{
					"id": 355,
					"name": "removeFromGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 356,
							"name": "removeFromGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove object from a group.",
								"returns": "True if all objects we successfully removed.\n"
							},
							"parameters": [
								{
									"id": 357,
									"name": "objs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of object to remove."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IObj"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IObj"
												}
											}
										]
									}
								},
								{
									"id": 358,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 132,
							"character": 31
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						335,
						343,
						339,
						351,
						347,
						355
					]
				}
			],
			"sources": [
				{
					"fileName": "object.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 359,
			"name": "\"plane\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/plane.ts",
			"comment": {
				"shortText": "Function for working with planes."
			},
			"children": [
				{
					"id": 364,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 365,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of an existing plane.",
								"returns": "A new plane object.\n"
							},
							"parameters": [
								{
									"id": 366,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The plane object to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 367,
									"name": "copy_attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 46,
							"character": 20
						}
					]
				},
				{
					"id": 368,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 369,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies a plane from one model into another model.",
								"returns": "The copied plane object in the model.\n"
							},
							"parameters": [
								{
									"id": 370,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The model to copy to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 371,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The plane object to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 60,
							"character": 27
						}
					]
				},
				{
					"id": 391,
					"name": "FromCircle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 392,
							"name": "FromCircle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a plane from a circle. The plane will have the same origin and orientation as the circle.",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 393,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The circle to create a plane from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 158,
							"character": 26
						}
					]
				},
				{
					"id": 386,
					"name": "FromOriginPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 387,
							"name": "FromOriginPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a plane from an origin point and two other points on the plane.",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 388,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the origin of plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 389,
									"name": "pt1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, a point on the plane. This will be used to define the plane X axis."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 390,
									"name": "pt2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, a point on the plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 135,
							"character": 32
						}
					]
				},
				{
					"id": 372,
					"name": "FromOriginVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 373,
							"name": "FromOriginVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a plane object from an origin point and two vectors.",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 374,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the origin of plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 375,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "XYZ vector, the x-axis of plane."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 376,
									"name": "vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "XYZ vector, a vector in the plane. (This vector must not be co-dir with vec_x.)"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 81,
							"character": 33
						}
					]
				},
				{
					"id": 377,
					"name": "FromOriginXY",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 378,
							"name": "FromOriginXY",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a plane object from an origin point, parallel to the WCS XY plane .",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 379,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the origin of plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 94,
							"character": 28
						}
					]
				},
				{
					"id": 380,
					"name": "FromOriginYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 381,
							"name": "FromOriginYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a plane object from an origin point, parallel to the WCS YZ plane .",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 382,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the origin of plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 107,
							"character": 28
						}
					]
				},
				{
					"id": 383,
					"name": "FromOriginZX",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 384,
							"name": "FromOriginZX",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a plane object from an origin point, parallel to the WCS ZX plane .",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 385,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the origin of plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 120,
							"character": 28
						}
					]
				},
				{
					"id": 360,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 361,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a plane from the model based on an ID number.\nIn the viewer, the object label can display (it starts with 'o'), which contains the ID.\nFor example, if the label is \"o123\", then the ID is the number 123.",
								"returns": "The plane object.\n"
							},
							"parameters": [
								{
									"id": 362,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get plane from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 363,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID number of plane."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 29,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						364,
						368,
						391,
						386,
						372,
						377,
						380,
						383,
						360
					]
				}
			],
			"sources": [
				{
					"fileName": "plane.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 394,
			"name": "\"pline\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/pline.ts",
			"comment": {
				"shortText": "Functions for working with polylines."
			},
			"children": [
				{
					"id": 399,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 400,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of a polyline.",
								"returns": "Polyline object.\n"
							},
							"parameters": [
								{
									"id": 401,
									"name": "polyline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The polyline to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 402,
									"name": "copy_attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "If true, attributes are copied to the new circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 50,
							"character": 20
						}
					]
				},
				{
					"id": 403,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 404,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies a circle from one model into another model.",
								"returns": "The copied polyline object in the model.\n"
							},
							"parameters": [
								{
									"id": 405,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The model to copy to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 406,
									"name": "polyline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The polyline object to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 64,
							"character": 27
						}
					]
				},
				{
					"id": 415,
					"name": "From2Points",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 416,
							"name": "From2Points",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a polyline with a single straight line segment, connecting two points.",
								"returns": "Polyline object.\n"
							},
							"parameters": [
								{
									"id": 417,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Start point of line"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 418,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "End point of line."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 127,
							"character": 27
						}
					]
				},
				{
					"id": 411,
					"name": "FromCircle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 412,
							"name": "FromCircle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a polyline by dividing a circle or arc into straight line segments.",
								"text": "If it is a circle, then a a closed polyline is returned.\n",
								"returns": "Polyline object.\n"
							},
							"parameters": [
								{
									"id": 413,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle or circular arc to construct polyline from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 414,
									"name": "segments",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number of segments in resulting polyline."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 113,
							"character": 26
						}
					]
				},
				{
					"id": 407,
					"name": "FromPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 408,
							"name": "FromPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a polyline by joining a list of points",
								"text": "Straight line segments are cerated between every two points.\n",
								"returns": "Polyline object.\n"
							},
							"parameters": [
								{
									"id": 409,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A list of points."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								},
								{
									"id": 410,
									"name": "is_closed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "if true,\n     creates a closed polyline object by joining the last point to the first point."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 88,
							"character": 26
						}
					]
				},
				{
					"id": 395,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 396,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a polyline from the model based on an ID number.\nIn the viewer, the object label can display (it starts with 'o'), which contains the ID.\nFor example, if the label is \"o123\", then the ID is the number 123.",
								"returns": "Polyline object.\n"
							},
							"parameters": [
								{
									"id": 397,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get polyline object from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 398,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID number of polyline object."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 32,
							"character": 19
						}
					]
				},
				{
					"id": 438,
					"name": "evalParam",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 439,
							"name": "evalParam",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a point by evaluating the position along a polyline or segment in the polyline.\nThe position is specified by a t parameter that starts at 0 and ends at 1.\nThe segment index is not -1, then it specified teh segment to evaluate.\nIf the polyline is closed and the segment index is -1, 0 and 1 will have the same position.",
								"returns": "Point.\n"
							},
							"parameters": [
								{
									"id": 440,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to evaluate."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 441,
									"name": "t",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Parameter to evaluate (0 is the start of the polyline, 1 is the end of the polyline)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 442,
									"name": "segment_index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The segment of the polyline to evaluate. When -1, the whole polyline is evaluated."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": " -1"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 221,
							"character": 25
						}
					]
				},
				{
					"id": 446,
					"name": "explode",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 447,
							"name": "explode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Explodes a polyline into smaller polylines, each with only one segment.\nThe original polyline is not modified.",
								"returns": "List of polylines objects.\n"
							},
							"parameters": [
								{
									"id": 448,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to explode."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPolyline"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 338,
							"character": 23
						}
					]
				},
				{
					"id": 449,
					"name": "extract",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 450,
							"name": "extract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates new polyline by extracting line segments from an existing polyline.\nThe original polyline is not modified.",
								"text": "The individual segments are no joined.\n",
								"returns": "List of new polylines created from extract\n"
							},
							"parameters": [
								{
									"id": 451,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to extract segments from"
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 452,
									"name": "segment_index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index numbers of polyline segments to extract"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPolyline"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 353,
							"character": 23
						}
					]
				},
				{
					"id": 453,
					"name": "extrude",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 454,
							"name": "extrude",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a new polymesh by extruding a polyline by a specified vector.\nThe original polyline is not modified.",
								"text": "New points are created by translating the existing points by the specified vector.\nFour-sided faces are the created between the original and new points.\nThe faces are joined to create a polymesh.\n\nIf cap is true, input pline and moved pline are used as edges to create two polygons. The polygones are\njoined to the polymesh.\n",
								"returns": "Polymesh object.\n"
							},
							"parameters": [
								{
									"id": 455,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to extrude."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 456,
									"name": "vector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing direction and distance of extrusion."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 457,
									"name": "cap",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Closes polymesh by creating a polygon on each end of the extrusion if true."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 383,
							"character": 23
						}
					]
				},
				{
					"id": 435,
					"name": "getEndPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 436,
							"name": "getEndPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the start and end points of a polyline.",
								"returns": "A list with two points, or null if the polyline is closed.\n"
							},
							"parameters": [
								{
									"id": 437,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 199,
							"character": 28
						}
					]
				},
				{
					"id": 432,
					"name": "getPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 433,
							"name": "getPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get all points in a polyline in sequence order.",
								"returns": "A list of points.\n"
							},
							"parameters": [
								{
									"id": 434,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 188,
							"character": 25
						}
					]
				},
				{
					"id": 419,
					"name": "isClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 420,
							"name": "isClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if the polyline is closed.",
								"returns": "True if the polyline is closed.\n"
							},
							"parameters": [
								{
									"id": 421,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 141,
							"character": 24
						}
					]
				},
				{
					"id": 443,
					"name": "join",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 444,
							"name": "join",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Joins polylines with shared end points. The original polylines are deleted.",
								"returns": "List of polyline objects.\n"
							},
							"parameters": [
								{
									"id": 445,
									"name": "plines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of polylines to join."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPolyline"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPolyline"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 238,
							"character": 20
						}
					]
				},
				{
					"id": 458,
					"name": "loft",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 459,
							"name": "loft",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a new polymesh by lofting a list of polylines with equal numbers of segments.\nThe original polylines are not modified.",
								"text": "Four-sided faces are the created between the points of consecutive polylines.\nThe faces are joined to create a polymesh.\n\nThrows an error if polylines do not have the same number of segments\n",
								"returns": "Polymesh object.\n"
							},
							"parameters": [
								{
									"id": 460,
									"name": "plines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of polylines to loft (in order)."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPolyline"
										}
									}
								},
								{
									"id": 461,
									"name": "is_closed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Closes polymesh by lofting back to first polyline if true."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 412,
							"character": 20
						}
					]
				},
				{
					"id": 426,
					"name": "numEdges",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 427,
							"name": "numEdges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of edges in the polyline.",
								"returns": "The number of edges.\n"
							},
							"parameters": [
								{
									"id": 428,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 166,
							"character": 24
						}
					]
				},
				{
					"id": 429,
					"name": "numVertices",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 430,
							"name": "numVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of vertices in the polyline.",
								"returns": "The number of vertices.\n"
							},
							"parameters": [
								{
									"id": 431,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 177,
							"character": 27
						}
					]
				},
				{
					"id": 422,
					"name": "setIsClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 423,
							"name": "setIsClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the polyline to be open or closed.",
								"returns": "True if the value was changed, false otherwise.\n"
							},
							"parameters": [
								{
									"id": 424,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 425,
									"name": "is_closed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "True for closed, false for open."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 153,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						399,
						403,
						415,
						411,
						407,
						395,
						438,
						446,
						449,
						453,
						435,
						432,
						419,
						443,
						458,
						426,
						429,
						422
					]
				}
			],
			"sources": [
				{
					"fileName": "pline.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 462,
			"name": "\"pmesh\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/pmesh.ts",
			"comment": {
				"shortText": "Functions for working with polymehes."
			},
			"children": [
				{
					"id": 467,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 468,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of a polymesh.",
								"returns": "Polymesh object.\n"
							},
							"parameters": [
								{
									"id": 469,
									"name": "polymesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The polymesh to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								},
								{
									"id": 470,
									"name": "copy_attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "If true, attributes are copied to the new circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 53,
							"character": 20
						}
					]
				},
				{
					"id": 471,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 472,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies a polymesh from one model into another model.",
								"returns": "The copied polymesh object in the model.\n"
							},
							"parameters": [
								{
									"id": 473,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The model to copy to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 474,
									"name": "polymesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 67,
							"character": 27
						}
					]
				},
				{
					"id": 478,
					"name": "FromPline",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 479,
							"name": "FromPline",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a polymesh from a polyline. The polymesh will have a single face.",
								"returns": "Polymesh object with single face.\n"
							},
							"parameters": [
								{
									"id": 480,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object to create the polymesh from."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 115,
							"character": 25
						}
					]
				},
				{
					"id": 475,
					"name": "FromPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 476,
							"name": "FromPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a polymesh from a list of lists of face corner points.\nFor example [[p1, p2, p3], [p3, p2, p4]] would create a polymesh with two triangular faces.\nIn this example, the two faces share points p2 and p3.",
								"returns": "Polymesh object.\n"
							},
							"parameters": [
								{
									"id": 477,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of lists of face corner points."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"name": "IPoint"
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 89,
							"character": 26
						}
					]
				},
				{
					"id": 463,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 464,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a polymesh from the model based on an ID number.\nIn the viewer, the object label can display (it starts with 'o'), which contains the ID.\nFor example, if the label is \"o123\", then the ID is the number 123.",
								"returns": "Polymesh object.\n"
							},
							"parameters": [
								{
									"id": 465,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get polymesh from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 466,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID number of polymesh."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 35,
							"character": 19
						}
					]
				},
				{
					"id": 499,
					"name": "extrude",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 500,
							"name": "extrude",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a new polymesh by extruding an existing polymesh by a specified vector.\nThe original polymesh is not modified.",
								"text": "New points are created by translating the existing points by the specified vector.\nFour-sided faces are the created between the original and new points.\nThe faces are joined to create a polymesh.\n",
								"returns": "A polymesh if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 501,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh to extrude."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								},
								{
									"id": 502,
									"name": "vector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The vector defining the extrusion length and direction."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 209,
							"character": 23
						}
					]
				},
				{
					"id": 496,
					"name": "getPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 497,
							"name": "getPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get all points in a polymesh. The sequence of points is in face order.",
								"returns": "List of points.\n"
							},
							"parameters": [
								{
									"id": 498,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 188,
							"character": 25
						}
					]
				},
				{
					"id": 481,
					"name": "isClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 482,
							"name": "isClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if the polymesh is closed.",
								"returns": "True if the polymesh is closed.\n"
							},
							"parameters": [
								{
									"id": 483,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 133,
							"character": 24
						}
					]
				},
				{
					"id": 490,
					"name": "numEdges",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 491,
							"name": "numEdges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of edges in a polymesh, for both the wires and the faces.",
								"returns": "List of two numbers, number of wire edges and number of face edges.\n"
							},
							"parameters": [
								{
									"id": 492,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 166,
							"character": 24
						}
					]
				},
				{
					"id": 484,
					"name": "numFaces",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 485,
							"name": "numFaces",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of faces in a polymesh.",
								"returns": "The number of faces.\n"
							},
							"parameters": [
								{
									"id": 486,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 144,
							"character": 24
						}
					]
				},
				{
					"id": 493,
					"name": "numVertices",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 494,
							"name": "numVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of vertices in the polymesh, for both the wires and the faces.",
								"returns": "List of two numbers, number of wire vertices and number of face vertices.\n"
							},
							"parameters": [
								{
									"id": 495,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 177,
							"character": 27
						}
					]
				},
				{
					"id": 487,
					"name": "numWires",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 488,
							"name": "numWires",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of wires in a polymesh.",
								"returns": "The number of wires.\n"
							},
							"parameters": [
								{
									"id": 489,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 155,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						467,
						471,
						478,
						475,
						463,
						499,
						496,
						481,
						490,
						484,
						493,
						487
					]
				}
			],
			"sources": [
				{
					"fileName": "pmesh.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 503,
			"name": "\"point\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/point.ts",
			"comment": {
				"shortText": "Function for working with points."
			},
			"children": [
				{
					"id": 519,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 520,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copy a point within a model.",
								"returns": "New point.\n"
							},
							"parameters": [
								{
									"id": 521,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 85,
							"character": 20
						}
					]
				},
				{
					"id": 522,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 523,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copy a point from one model into another model.",
								"returns": "The copied plane object in the model.\n"
							},
							"parameters": [
								{
									"id": 524,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The model to copy to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 525,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 98,
							"character": 27
						}
					]
				},
				{
					"id": 534,
					"name": "FromPointsMean",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 535,
							"name": "FromPointsMean",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a point that is at the center of a cluster of points.",
								"returns": "New point if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 536,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of points."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 144,
							"character": 30
						}
					]
				},
				{
					"id": 526,
					"name": "FromXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 527,
							"name": "FromXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a point from XYZ coordinates.",
								"returns": "New point if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 528,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to add points to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 529,
									"name": "xyz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "XYZ coordinates, as a list of three numbers."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 118,
							"character": 23
						}
					]
				},
				{
					"id": 530,
					"name": "FromXYZs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 531,
							"name": "FromXYZs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a list of points from a list of X, Y and Z coordinates.\nPoints are returned in list order.",
								"returns": "New list of points if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 532,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to add points to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 533,
									"name": "xyzs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A list XYZ coordinates, as a list of lists of three numbers."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "gs.XYZ"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 130,
							"character": 24
						}
					]
				},
				{
					"id": 504,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 505,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a point from a model.",
								"returns": "Point if successful. Null if the point does nor exist.\n"
							},
							"parameters": [
								{
									"id": 506,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get point from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 507,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "ID of point to get."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 27,
							"character": 19
						}
					]
				},
				{
					"id": 512,
					"name": "GetFromGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 513,
							"name": "GetFromGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all the points from a group.",
								"returns": "List of points.\n"
							},
							"parameters": [
								{
									"id": 514,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get the points from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 515,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The group name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 56,
							"character": 28
						}
					]
				},
				{
					"id": 516,
					"name": "GetFromObjs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 517,
							"name": "GetFromObjs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a list of unique points for a list of objects.",
								"returns": "List of points.\n"
							},
							"parameters": [
								{
									"id": 518,
									"name": "objs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IObj"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IObj"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 67,
							"character": 27
						}
					]
				},
				{
					"id": 508,
					"name": "Gets",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 509,
							"name": "Gets",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a list of points from the model.",
								"returns": "A list of points.\n"
							},
							"parameters": [
								{
									"id": 510,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get points from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 511,
									"name": "ids",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "A point ID or list of point IDs, integer numbers. If null, then all points are returned."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 39,
							"character": 20
						}
					]
				},
				{
					"id": 554,
					"name": "addToGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 555,
							"name": "addToGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add points to a group.",
								"returns": "True if all points we successfully added.\n"
							},
							"parameters": [
								{
									"id": 556,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IPoint"
												}
											},
											{
												"type": "reference",
												"name": "IPoint"
											}
										]
									}
								},
								{
									"id": 557,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 257,
							"character": 26
						}
					]
				},
				{
					"id": 537,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 538,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes a point or a list of points from the model.",
								"returns": "True if successful\n"
							},
							"parameters": [
								{
									"id": 539,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point or list of points to delete."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IPoint"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 174,
							"character": 19
						}
					]
				},
				{
					"id": 540,
					"name": "getXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 541,
							"name": "getXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the XYZ coordinates of the point.",
								"returns": "The XYZ coordinates if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 542,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point to get coordinates from."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 194,
							"character": 22
						}
					]
				},
				{
					"id": 551,
					"name": "merge",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 552,
							"name": "merge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Merges a cluster of points into a single point.\nThe cluster of points are deletetd and replaced by one new point located at the center of the cluster.\nAll objects in the model that are using those points will be updated.",
								"returns": "New point if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 553,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Cluster of points to merge."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 235,
							"character": 21
						}
					]
				},
				{
					"id": 547,
					"name": "mergeByTol",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 548,
							"name": "mergeByTol",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Merges point or a list of points in the model.",
								"returns": "True if successful, false otherwise.\n"
							},
							"parameters": [
								{
									"id": 549,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point or list of points to delete."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								},
								{
									"id": 550,
									"name": "tolerance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 217,
							"character": 26
						}
					]
				},
				{
					"id": 558,
					"name": "removeFromGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 559,
							"name": "removeFromGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove points from a group.",
								"returns": "True if all points we successfully removed.\n"
							},
							"parameters": [
								{
									"id": 560,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IPoint"
												}
											},
											{
												"type": "reference",
												"name": "IPoint"
											}
										]
									}
								},
								{
									"id": 561,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 279,
							"character": 31
						}
					]
				},
				{
					"id": 543,
					"name": "setXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 544,
							"name": "setXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the XYZ coordinates of the point.",
								"returns": "The old XYZ coordinates if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 545,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point to set coorinates for."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 546,
									"name": "xyz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The new XYZ coordinates, as a list of three numbers."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 206,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						519,
						522,
						534,
						526,
						530,
						504,
						512,
						516,
						508,
						554,
						537,
						540,
						551,
						547,
						558,
						543
					]
				}
			],
			"sources": [
				{
					"fileName": "point.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 562,
			"name": "\"query\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/query.ts",
			"comment": {
				"shortText": "Query functions check if an entity fufils certain conditions."
			},
			"children": [
				{
					"id": 563,
					"name": "x",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "query.ts",
							"line": 19,
							"character": 7
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "temp"
					},
					"defaultValue": "\"temp\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						563
					]
				}
			],
			"sources": [
				{
					"fileName": "query.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 564,
			"name": "\"ray\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/ray.ts",
			"children": [
				{
					"id": 569,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 570,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of a ray.",
								"returns": "A new ray.\n"
							},
							"parameters": [
								{
									"id": 571,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The ray to copy."
									},
									"type": {
										"type": "reference",
										"name": "IRay"
									}
								},
								{
									"id": 572,
									"name": "copy_attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IRay"
							}
						}
					],
					"sources": [
						{
							"fileName": "ray.ts",
							"line": 36,
							"character": 20
						}
					]
				},
				{
					"id": 573,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 574,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies a ray from one model into another model.",
								"returns": "The ray object in the model.\n"
							},
							"parameters": [
								{
									"id": 575,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 576,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The ray object to copy."
									},
									"type": {
										"type": "reference",
										"name": "IRay"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IRay"
							}
						}
					],
					"sources": [
						{
							"fileName": "ray.ts",
							"line": 49,
							"character": 27
						}
					]
				},
				{
					"id": 577,
					"name": "FromOriginVector",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 578,
							"name": "FromOriginVector",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a ray from an origin point and one direction vector describing its direction",
								"returns": "New ray if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 579,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 580,
									"name": "vector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Direction vector describing direction of ray"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IRay"
							}
						}
					],
					"sources": [
						{
							"fileName": "ray.ts",
							"line": 68,
							"character": 32
						}
					]
				},
				{
					"id": 565,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 566,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a ray from the model based on an index number",
								"returns": "Ray object if successful\n"
							},
							"parameters": [
								{
									"id": 567,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get ray from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 568,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of ray"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IRay"
							}
						}
					],
					"sources": [
						{
							"fileName": "ray.ts",
							"line": 19,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						569,
						573,
						577,
						565
					]
				}
			],
			"sources": [
				{
					"fileName": "ray.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 617,
			"name": "\"split\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/split.ts",
			"comment": {
				"shortText": "Functions for splitting geometric objects that insersect with one another."
			},
			"children": [
				{
					"id": 618,
					"name": "circleCircle2D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 619,
							"name": "circleCircle2D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Splits two co-planar circles.\nIf an intersection is found, then new arcs will be generated and the old circles will be deleted.\nReturns null if circles are not co-planar.\nReturns null if circles do not intersect.",
								"returns": "Four circle objects (arcs) if successful, null if no intersection was found.\n"
							},
							"parameters": [
								{
									"id": 620,
									"name": "circle1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object, the circle to split."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 621,
									"name": "circle2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ICircle"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "split.ts",
							"line": 35,
							"character": 30
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						618
					]
				}
			],
			"sources": [
				{
					"fileName": "split.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 583,
			"name": "\"string\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/string.ts",
			"children": [
				{
					"id": 588,
					"name": "endsWith",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 589,
							"name": "endsWith",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string ends with a specified end string.",
								"returns": "True if str ends with search_str, false otherwise.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nresult = String.endsWith(string,\"ge\")<br/></code>\n<br/>Expected value of result is true.\n"
							},
							"parameters": [
								{
									"id": 590,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 591,
									"name": "end_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "End string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 48,
							"character": 24
						}
					]
				},
				{
					"id": 592,
					"name": "includes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 593,
							"name": "includes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string contains a specified search string.",
								"returns": "True if str contains search_str, false otherwise.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nincl = String.includes(string,\"an\")<br/></code>\n<br/>Expected value of incl is true.\n"
							},
							"parameters": [
								{
									"id": 594,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to search."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 595,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 66,
							"character": 24
						}
					]
				},
				{
					"id": 596,
					"name": "len",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 597,
							"name": "len",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of characters in a string.",
								"returns": "Length of string.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nlength = String.len(string)<br/></code>\n<br/>Expected value of length is 6.\n"
							},
							"parameters": [
								{
									"id": 598,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to find length of."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 83,
							"character": 19
						}
					]
				},
				{
					"id": 599,
					"name": "replace",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 600,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Searches for and replaces the specified search string in a string.\nThe search string can also be a regular expression.",
								"returns": "New string with replaced characters.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nnewString = String.Replace(string,\"O\",\"Ar\")<br/></code>\n<br/>Expected value of newString is \"Arrange\".\n"
							},
							"parameters": [
								{
									"id": 601,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 602,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string or regular expression to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 603,
									"name": "new_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Replacement string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 102,
							"character": 23
						}
					]
				},
				{
					"id": 604,
					"name": "search",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 605,
							"name": "search",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position index of the first occurance of the specified search string within a string.\nIf the specified sub-string cannot be found, then returns -1.",
								"returns": "Number that represents position of search_str in str.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsearch = String.search(string,\"e\")<br/></code>\n<br/>Expected value of search is 5.\n"
							},
							"parameters": [
								{
									"id": 606,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 607,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string or regular expression to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 122,
							"character": 22
						}
					]
				},
				{
					"id": 608,
					"name": "split",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 609,
							"name": "split",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Splits a string into a list of substrings using a specified separator string.",
								"returns": "List of substrings.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsplit = String.split(string,\"a\")<br/></code>\n<br/>Expected value of split is [\"Or\",\"nge\"].\n"
							},
							"parameters": [
								{
									"id": 610,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 611,
									"name": "separator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String of characters used to split string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 140,
							"character": 21
						}
					]
				},
				{
					"id": 584,
					"name": "startsWith",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 585,
							"name": "startsWith",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string starts with the specified start string.",
								"returns": "True if str starts with search_str, false otherwise.\n\n<h3>Example:</h3>\n<code>\nstring = \"Orange\"<br/>\nresult = String.startsWith(string,\"Or\")<br/>\n</code>\n<br/>Expected value of result is true.\n"
							},
							"parameters": [
								{
									"id": 586,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 587,
									"name": "start_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Start tring."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 30,
							"character": 26
						}
					]
				},
				{
					"id": 612,
					"name": "substring",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 613,
							"name": "substring",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Extracts characters in a string between two specified indices and returns it as a new string.\nStart index is inclusive and end index is exclusive.",
								"returns": "New string with extracted characters.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsubstring = String.substring(string,1,4)<br/></code>\n<br/>Expected value of ends is \"ran\".\n"
							},
							"parameters": [
								{
									"id": 614,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 615,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index to start extracting characters (inclusive)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 616,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index to stop extracting characters (exclusive)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 160,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						588,
						592,
						596,
						599,
						604,
						608,
						584,
						612
					]
				}
			],
			"sources": [
				{
					"fileName": "string.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 581,
			"name": "\"topo\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/gs-modelling/lib/topo.ts",
			"comment": {
				"shortText": "Topology are sub-components within each object that are connected together.<br/>\nTopology consists of vertices, edges, wires and faces.<br/>"
			},
			"children": [
				{
					"id": 582,
					"name": "x",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "topo.ts",
							"line": 24,
							"character": 7
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "temp"
					},
					"defaultValue": "\"temp\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						582
					]
				}
			],
			"sources": [
				{
					"fileName": "topo.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1,
				50,
				55,
				122,
				182,
				189,
				192,
				218,
				227,
				286,
				331,
				334,
				359,
				394,
				462,
				503,
				562,
				564,
				617,
				583,
				581
			]
		}
	]
}