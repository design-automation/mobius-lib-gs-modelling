{
	"id": 0,
	"name": "gs-modelling",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "\"attrib\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/attrib.ts",
			"children": [
				{
					"id": 16,
					"name": "Create",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 17,
							"name": "Create",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds an attribute to a model",
								"returns": "New attribute\n"
							},
							"parameters": [
								{
									"id": 18,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to add to"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 19,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Name of new attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 20,
									"name": "geom_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Data type for attribute values. (number, string, boolean, number[], string[], boolean[])"
									},
									"type": {
										"type": "reference",
										"name": "EGeomType"
									}
								},
								{
									"id": 21,
									"name": "data_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EDataType"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IAttrib"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 66,
							"character": 22
						}
					]
				},
				{
					"id": 2,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets attribute that apply for a specified geometry type from a model",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 4,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 5,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The attribute name"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6,
									"name": "geom_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Type of geometry to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "EGeomType"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IAttrib"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 18,
							"character": 19
						}
					]
				},
				{
					"id": 22,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 23,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes an attribute",
								"returns": "True if successful\n"
							},
							"parameters": [
								{
									"id": 24,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute to delete"
									},
									"type": {
										"type": "reference",
										"name": "IAttrib"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 85,
							"character": 19
						}
					]
				},
				{
					"id": 7,
					"name": "getAll",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 8,
							"name": "getAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all entity attribs",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 9,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IAttrib"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 32,
							"character": 22
						}
					]
				},
				{
					"id": 10,
					"name": "getAllEnts",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 11,
							"name": "getAllEnts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all entity attribs",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 12,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IAttrib"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 41,
							"character": 26
						}
					]
				},
				{
					"id": 13,
					"name": "getAllTopos",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 14,
							"name": "getAllTopos",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all topo attribs",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 15,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IAttrib"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 50,
							"character": 27
						}
					]
				},
				{
					"id": 32,
					"name": "getEntValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 33,
							"name": "getEntValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the value of a ent attribute for a specified geometry",
								"returns": "Value of attribute\n"
							},
							"parameters": [
								{
									"id": 34,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "IEntAttrib"
									}
								},
								{
									"id": 35,
									"name": "ent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 116,
							"character": 27
						}
					]
				},
				{
					"id": 25,
					"name": "getName",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 26,
							"name": "getName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the name of an attribute",
								"returns": "Name of specified attribute\n"
							},
							"parameters": [
								{
									"id": 27,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute to get name of"
									},
									"type": {
										"type": "reference",
										"name": "IAttrib"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 94,
							"character": 23
						}
					]
				},
				{
					"id": 41,
					"name": "getTopoValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 42,
							"name": "getTopoValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the value of a topo attribute for a specified geometry",
								"returns": "Value of attribute\n"
							},
							"parameters": [
								{
									"id": 43,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "ITopoAttrib"
									}
								},
								{
									"id": 44,
									"name": "topo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "reference",
										"name": "ITopo"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 137,
							"character": 28
						}
					]
				},
				{
					"id": 36,
					"name": "setEntValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 37,
							"name": "setEntValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the value of a ent attribute for a specified geometry",
								"returns": "Old value of specified attribute\n"
							},
							"parameters": [
								{
									"id": 38,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "IEntAttrib"
									}
								},
								{
									"id": 39,
									"name": "ent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											}
										]
									}
								},
								{
									"id": 40,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "New value of attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 127,
							"character": 27
						}
					]
				},
				{
					"id": 28,
					"name": "setName",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 29,
							"name": "setName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the name of an attribute",
								"returns": "Old name of specified attribute\n"
							},
							"parameters": [
								{
									"id": 30,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute to set name"
									},
									"type": {
										"type": "reference",
										"name": "IAttrib"
									}
								},
								{
									"id": 31,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "New name of attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 104,
							"character": 23
						}
					]
				},
				{
					"id": 45,
					"name": "setTopoValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 46,
							"name": "setTopoValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the value of a topo attribute for a specified geometry",
								"returns": "Old value of specified attribute\n"
							},
							"parameters": [
								{
									"id": 47,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "ITopoAttrib"
									}
								},
								{
									"id": 48,
									"name": "topo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "reference",
										"name": "ITopo"
									}
								},
								{
									"id": 49,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "New value of attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 148,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						16,
						2,
						22,
						7,
						10,
						13,
						32,
						25,
						41,
						36,
						28,
						45
					]
				}
			],
			"sources": [
				{
					"fileName": "attrib.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 191,
			"name": "\"calc\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/calc.ts",
			"comment": {
				"shortText": "Function for doing various geometric calculations."
			},
			"children": [
				{
					"id": 192,
					"name": "distBetweenPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 193,
							"name": "distBetweenPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculate the distance between two points.",
								"returns": "The distance.\n"
							},
							"parameters": [
								{
									"id": 194,
									"name": "point1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The first point."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 195,
									"name": "point2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The second point."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "calc.ts",
							"line": 23,
							"character": 33
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						192
					]
				}
			],
			"sources": [
				{
					"fileName": "calc.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 287,
			"name": "\"circle\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/circle.ts",
			"comment": {
				"shortText": "Functions for working with circles.\nCircles are geometric objects definded by a single vertex and a set of parameters.\nThe circle object can be either a closed circle or an open arc."
			},
			"children": [
				{
					"id": 292,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 293,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of a circle object.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 294,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The circle object to copy."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 295,
									"name": "copy_attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "If true, attributes are copied to the new circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 49,
							"character": 20
						}
					]
				},
				{
					"id": 296,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 297,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies a circle from one model into another model.",
								"returns": "The copied circle object in the model.\n"
							},
							"parameters": [
								{
									"id": 298,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The model to copy to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 299,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The circle object to copy."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 63,
							"character": 27
						}
					]
				},
				{
					"id": 306,
					"name": "FromOrigin2Points",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 307,
							"name": "FromOrigin2Points",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a circle at the origin point parallel to a plane that passes through two other points.\nThe radius will be equal to the distance from the origin to point1.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at point1 in an anti-clockwise direction.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 308,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the center of the circle."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 309,
									"name": "point1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, on the circle perimeter, and defining teh x-axis of the plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 310,
									"name": "point2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, on the plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 311,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 109,
							"character": 33
						}
					]
				},
				{
					"id": 300,
					"name": "FromOrigin2Vectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 301,
							"name": "FromOrigin2Vectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a circle from an origin point parallel to a plane defined by the two X and Y vectors.\nThe radius will be equal to the length of the X vector.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at the x-axis in an anti-clockwise direction.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 302,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the center of the circle."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 303,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "X-axis of the circle plane. (The length of the vecor described the radius.)"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 304,
									"name": "vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector on the circle plane."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 305,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 88,
							"character": 34
						}
					]
				},
				{
					"id": 312,
					"name": "FromOriginXY",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 313,
							"name": "FromOriginXY",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a circle at the origin point parallel to the WCS XY plane, with the specified radius.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at point1 in an anti-clockwise direction.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 314,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the center of the circle."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 315,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 316,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 131,
							"character": 28
						}
					]
				},
				{
					"id": 317,
					"name": "FromOriginYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 318,
							"name": "FromOriginYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a circle at the origin point parallel to the WCS YZ plane, with the specified radius.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at point1 in an anti-clockwise direction.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 319,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the center of the circle."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 320,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 321,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 151,
							"character": 28
						}
					]
				},
				{
					"id": 322,
					"name": "FromOriginZX",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 323,
							"name": "FromOriginZX",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a circle at the origin point parallel to the WCS ZX plane, with the specified radius.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at point1 in an anti-clockwise direction.",
								"returns": "New circle (or arc).\n"
							},
							"parameters": [
								{
									"id": 324,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the center of the circle."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 325,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 326,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 171,
							"character": 28
						}
					]
				},
				{
					"id": 327,
					"name": "FromPlane",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 328,
							"name": "FromPlane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a circle from a plane, with the specified radius.\nIf angle is undefined, a circle is created. Otherwise, an arc is created, with the specified angles\nstarting at point1 in an anti-clockwise direction.",
								"returns": "New circle object.\n"
							},
							"parameters": [
								{
									"id": 329,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plane object to construct circle on."
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 330,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 331,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, or null for a circle."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 191,
							"character": 25
						}
					]
				},
				{
					"id": 288,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 289,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a circle from the model based on an ID number.\nIn the viewer, the object label can display (it starts with 'o'), which contains the ID.\nFor example, if the label is \"o123\", then the ID is the number 123.",
								"returns": "Circle object.\n"
							},
							"parameters": [
								{
									"id": 290,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get circle object from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 291,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID number of circle object."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 35,
							"character": 19
						}
					]
				},
				{
					"id": 351,
					"name": "calcLength",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 352,
							"name": "calcLength",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the perimeter length of a circle.\nIf the circle is an open arc, then the length of the arc is returned.",
								"returns": "Length of circle\n"
							},
							"parameters": [
								{
									"id": 353,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to calculate length from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 286,
							"character": 26
						}
					]
				},
				{
					"id": 348,
					"name": "close",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 349,
							"name": "close",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Closes the arc, so that it becomes a circle.",
								"returns": "True if the open circle was closed, false if the circle was already closed.\n"
							},
							"parameters": [
								{
									"id": 350,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to close."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 268,
							"character": 21
						}
					]
				},
				{
					"id": 338,
					"name": "getArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 339,
							"name": "getArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the arc angles of the circle.",
								"returns": "The angles, or null if it is a closed circle.\n"
							},
							"parameters": [
								{
									"id": 340,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to get angles from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 233,
							"character": 28
						}
					]
				},
				{
					"id": 335,
					"name": "getAxes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 336,
							"name": "getAxes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the X and Y vectors of the circle plane. The circle radius is equal to the length of the X vector.",
								"returns": "Two vectors, the X and Y vectors of teh circle plane.\n"
							},
							"parameters": [
								{
									"id": 337,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to get vectors from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "gs.XYZ"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 222,
							"character": 23
						}
					]
				},
				{
					"id": 332,
					"name": "getOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 333,
							"name": "getOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the origin of the circle.",
								"returns": "Point object, the origin of teh circle.\n"
							},
							"parameters": [
								{
									"id": 334,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle objject to obtain origin from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 211,
							"character": 25
						}
					]
				},
				{
					"id": 345,
					"name": "isClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 346,
							"name": "isClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a circle object is closed. If it is not closed, then it must be an arc.",
								"returns": "True if the circle is closed.\n"
							},
							"parameters": [
								{
									"id": 347,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to test."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 257,
							"character": 24
						}
					]
				},
				{
					"id": 341,
					"name": "setArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 342,
							"name": "setArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the angles for the arc."
							},
							"parameters": [
								{
									"id": 343,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object to set angles for."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 344,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The angles to set, two numbers between 0 and 360. If null, then the circle is closed.\n"
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 244,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						292,
						296,
						306,
						300,
						312,
						317,
						322,
						327,
						288,
						351,
						348,
						338,
						335,
						332,
						345,
						341
					]
				}
			],
			"sources": [
				{
					"fileName": "circle.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 354,
			"name": "\"ellipse\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/ellipse.ts",
			"children": [
				{
					"id": 380,
					"name": "ArcFromOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 381,
							"name": "ArcFromOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed ellipse to the model based on an origin point and radius",
								"text": "Arc will be constructed parallel to the world XY plane with the specifed origin point as the center\npoint of the arc",
								"returns": "New ellipse if successful\n"
							},
							"parameters": [
								{
									"id": 382,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Center point of arc"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 383,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 384,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 385,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 102,
							"character": 29
						}
					]
				},
				{
					"id": 374,
					"name": "ArcFromOriginVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 375,
							"name": "ArcFromOriginVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a ellipse from an origin point and two direction vectors describing the x and y axis",
								"returns": "New ellipse if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 376,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 377,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing x-axis of plane, and the x radius"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 378,
									"name": "vec_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing x-axis of plane, and the y radius"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 379,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, for start and end of arc."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 87,
							"character": 36
						}
					]
				},
				{
					"id": 386,
					"name": "ArcFromPlane",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 387,
							"name": "ArcFromPlane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a circular arc to the model based on a plane and radius",
								"text": "Arc will be constructed parallel to the plane with the origin of the plane as the center point of the\nellipse that forms the arc<br/>\nArc will be constructed starting from the x-axis of the specified plane and follows the ellipse in the\nspecified direction until it reaches the angle specified",
								"returns": "New arc  (ellipse) if successful\n"
							},
							"parameters": [
								{
									"id": 388,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plane to construct arc on"
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 389,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 390,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 391,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, for start and end of arc."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 120,
							"character": 28
						}
					]
				},
				{
					"id": 364,
					"name": "FromOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 365,
							"name": "FromOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed ellipse to the model based on an origin point and radius",
								"text": "Ellipse will be constructed parallel to the world XY plane with the specifed origin point as the center\npoint of the ellipse",
								"returns": "New ellipse if successful\n"
							},
							"parameters": [
								{
									"id": 366,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Center point of ellipse"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 367,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 368,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 54,
							"character": 26
						}
					]
				},
				{
					"id": 359,
					"name": "FromOriginVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 360,
							"name": "FromOriginVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a ellipse from an origin point and two direction vectors describing the x and y axis",
								"returns": "New ellipse if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 361,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 362,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing x-axis of plane, and the radius"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 363,
									"name": "vec_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Direction vector describing y-axis of plane"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 40,
							"character": 33
						}
					]
				},
				{
					"id": 369,
					"name": "FromPlane",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 370,
							"name": "FromPlane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed ellipse to the model based on a plane and radius",
								"text": "Ellipse will be constructed parallel to the plane with the origin of the plane as the center point of the\nellipse",
								"returns": "New ellipse if successful\n"
							},
							"parameters": [
								{
									"id": 371,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plane to construct ellipse on"
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 372,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 373,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 68,
							"character": 25
						}
					]
				},
				{
					"id": 355,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 356,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a ellipse from the model based on an index number",
								"returns": "Ellipse object if successful\n"
							},
							"parameters": [
								{
									"id": 357,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get ellipse from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 358,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 20,
							"character": 19
						}
					]
				},
				{
					"id": 408,
					"name": "close",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 409,
							"name": "close",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Closes the arc, so that it becomes a ellipse.",
								"returns": "True if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 410,
									"name": "arc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to set value for"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 192,
							"character": 21
						}
					]
				},
				{
					"id": 398,
					"name": "getArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 399,
							"name": "getArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the angles for the arc. If this object was previously a closed ellipse, it will now become an open arc.",
								"returns": "The angles, or null.\n"
							},
							"parameters": [
								{
									"id": 400,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to get angles from."
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 158,
							"character": 28
						}
					]
				},
				{
					"id": 395,
					"name": "getAxes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 396,
							"name": "getAxes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the x and y vectors of a Ellipse",
								"text": "Direction of x and y vectors reflect the x and y axis of the underlying ellipse or ellipse of the ellipse<br/>\nMagnitude of x and y vectors reflect the x and y radius of the underlying ellipse or ellipse of the ellipse",
								"returns": "List of x and y vectors of a Ellipse\n"
							},
							"parameters": [
								{
									"id": 397,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to obtain vectors from"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "gs.XYZ"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 148,
							"character": 23
						}
					]
				},
				{
					"id": 392,
					"name": "getOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 393,
							"name": "getOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the origin of a Ellipse",
								"returns": "Origin point of Ellipse\n"
							},
							"parameters": [
								{
									"id": 394,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to obtain origin from"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 136,
							"character": 25
						}
					]
				},
				{
					"id": 405,
					"name": "isClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 406,
							"name": "isClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a Ellipse is closed. If it is not closed, then it must be an arc.",
								"returns": "True if Ellipse is closed\n"
							},
							"parameters": [
								{
									"id": 407,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to test"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 182,
							"character": 24
						}
					]
				},
				{
					"id": 411,
					"name": "length",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 412,
							"name": "length",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the length of a Ellipse",
								"text": "If specified ellipse is a closed ellipse or ellipse, returns the circumference of the ellipse or ellipse",
								"returns": "Length of ellipse\n"
							},
							"parameters": [
								{
									"id": 413,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to obtain length from"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 207,
							"character": 22
						}
					]
				},
				{
					"id": 401,
					"name": "setArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 402,
							"name": "setArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the angles for the arc. If this object was previously a closed ellipse, it will now become an open arc.",
								"returns": "True if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 403,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to set value for"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								},
								{
									"id": 404,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The value to set"
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 169,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						380,
						374,
						386,
						364,
						359,
						369,
						355,
						408,
						398,
						395,
						392,
						405,
						411,
						401
					]
				}
			],
			"sources": [
				{
					"fileName": "ellipse.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 414,
			"name": "\"entity\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/entity.ts",
			"children": [
				{
					"id": 415,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 416,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of an entity.",
								"returns": "Copy\n"
							},
							"parameters": [
								{
									"id": 417,
									"name": "entity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "reference",
										"name": "IEnt"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEnt"
							}
						}
					],
					"sources": [
						{
							"fileName": "entity.ts",
							"line": 18,
							"character": 20
						}
					]
				},
				{
					"id": 418,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 419,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes geometry or a list of geometry from the model",
								"text": "Affects geometry that contains or is based off specified geometry",
								"returns": "Number of items deleted if successful\n"
							},
							"parameters": [
								{
									"id": 420,
									"name": "entities",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IEnt"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IEnt"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "entity.ts",
							"line": 36,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						415,
						418
					]
				}
			],
			"sources": [
				{
					"fileName": "entity.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 931,
			"name": "\"generate/gen_gs_test_models\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/generate/gen_gs_test_models.ts",
			"children": [
				{
					"id": 932,
					"name": "path",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "Execute using NPM, models get saved in the /src/assets/ folder.\n1) \"npm run build_gs_models\" OR\n2) \"npm run build_models\" (which builds both three and gs)"
					},
					"sources": [
						{
							"fileName": "generate/gen_gs_test_models.ts",
							"line": 15,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"../gs-modelling/src/assets/gs-json/\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						932
					]
				}
			],
			"sources": [
				{
					"fileName": "generate/gen_gs_test_models.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 933,
			"name": "\"generate/gen_three_test_models\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/generate/gen_three_test_models.ts",
			"children": [
				{
					"id": 934,
					"name": "path",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "Execute using NPM, models get saved in the /src/assets/ folder.\n1) \"npm run build_three_models\" OR\n2) \"npm run build_models\" (which builds both three and gs)"
					},
					"sources": [
						{
							"fileName": "generate/gen_three_test_models.ts",
							"line": 15,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"../gs-modelling/src/assets/three/\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						934
					]
				}
			],
			"sources": [
				{
					"fileName": "generate/gen_three_test_models.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 885,
			"name": "\"generate/models_circles\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/generate/models_circles.ts",
			"children": [
				{
					"id": 888,
					"name": "genModelTest1",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 889,
							"name": "genModelTest1",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_circles.ts",
							"line": 13,
							"character": 29
						}
					]
				},
				{
					"id": 890,
					"name": "genModelTest1b",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 891,
							"name": "genModelTest1b",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_circles.ts",
							"line": 34,
							"character": 30
						}
					]
				},
				{
					"id": 892,
					"name": "genModelTest2",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 893,
							"name": "genModelTest2",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_circles.ts",
							"line": 54,
							"character": 29
						}
					]
				},
				{
					"id": 894,
					"name": "genModelTest3",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 895,
							"name": "genModelTest3",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_circles.ts",
							"line": 99,
							"character": 29
						}
					]
				},
				{
					"id": 896,
					"name": "genModelTest4",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 897,
							"name": "genModelTest4",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_circles.ts",
							"line": 123,
							"character": 29
						}
					]
				},
				{
					"id": 898,
					"name": "genModelTest5",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 899,
							"name": "genModelTest5",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_circles.ts",
							"line": 140,
							"character": 29
						}
					]
				},
				{
					"id": 900,
					"name": "genModelTest6",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 901,
							"name": "genModelTest6",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_circles.ts",
							"line": 166,
							"character": 29
						}
					]
				},
				{
					"id": 902,
					"name": "genModelTest7",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 903,
							"name": "genModelTest7",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_circles.ts",
							"line": 198,
							"character": 29
						}
					]
				},
				{
					"id": 904,
					"name": "genModelTest8",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 905,
							"name": "genModelTest8",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_circles.ts",
							"line": 217,
							"character": 29
						}
					]
				},
				{
					"id": 886,
					"name": "randXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 887,
							"name": "randXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_circles.ts",
							"line": 6,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						888,
						890,
						892,
						894,
						896,
						898,
						900,
						902,
						904,
						886
					]
				}
			],
			"sources": [
				{
					"fileName": "generate/models_circles.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 906,
			"name": "\"generate/models_plines\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/generate/models_plines.ts",
			"children": [
				{
					"id": 910,
					"name": "genModelTest1",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 911,
							"name": "genModelTest1",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_plines.ts",
							"line": 12,
							"character": 29
						}
					]
				},
				{
					"id": 912,
					"name": "genModelTest2",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 913,
							"name": "genModelTest2",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_plines.ts",
							"line": 20,
							"character": 29
						}
					]
				},
				{
					"id": 914,
					"name": "genModelTest3",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 915,
							"name": "genModelTest3",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_plines.ts",
							"line": 31,
							"character": 29
						}
					]
				},
				{
					"id": 916,
					"name": "genModelTest4",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 917,
							"name": "genModelTest4",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_plines.ts",
							"line": 46,
							"character": 29
						}
					]
				},
				{
					"id": 918,
					"name": "genModelTest5",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 919,
							"name": "genModelTest5",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_plines.ts",
							"line": 58,
							"character": 29
						}
					]
				},
				{
					"id": 920,
					"name": "genModelTest6",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 921,
							"name": "genModelTest6",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_plines.ts",
							"line": 73,
							"character": 29
						}
					]
				},
				{
					"id": 922,
					"name": "genModelTest7",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 923,
							"name": "genModelTest7",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_plines.ts",
							"line": 85,
							"character": 29
						}
					]
				},
				{
					"id": 907,
					"name": "randXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 908,
							"name": "randXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 909,
									"name": "scale",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_plines.ts",
							"line": 5,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						910,
						912,
						914,
						916,
						918,
						920,
						922,
						907
					]
				}
			],
			"sources": [
				{
					"fileName": "generate/models_plines.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 924,
			"name": "\"generate/models_pmeshes\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/generate/models_pmeshes.ts",
			"children": [
				{
					"id": 927,
					"name": "genModelTest1",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 928,
							"name": "genModelTest1",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_pmeshes.ts",
							"line": 9,
							"character": 29
						}
					]
				},
				{
					"id": 929,
					"name": "genModelTest2",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 930,
							"name": "genModelTest2",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_pmeshes.ts",
							"line": 20,
							"character": 29
						}
					]
				},
				{
					"id": 925,
					"name": "randXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 926,
							"name": "randXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_pmeshes.ts",
							"line": 5,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						927,
						929,
						925
					]
				}
			],
			"sources": [
				{
					"fileName": "generate/models_pmeshes.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 882,
			"name": "\"generate/models_weeks\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/generate/models_weeks.ts",
			"children": [
				{
					"id": 883,
					"name": "genModelWeek3",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 884,
							"name": "genModelWeek3",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "generate/models_weeks.ts",
							"line": 8,
							"character": 29
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						883
					]
				}
			],
			"sources": [
				{
					"fileName": "generate/models_weeks.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 430,
			"name": "\"group\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/group.ts",
			"comment": {
				"shortText": "Functions for working with groups."
			},
			"children": [
				{
					"id": 434,
					"name": "Create",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 435,
							"name": "Create",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new group.",
								"returns": "Ture if the group was successfully created.\n"
							},
							"parameters": [
								{
									"id": 436,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to create group in."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 437,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 41,
							"character": 22
						}
					]
				},
				{
					"id": 438,
					"name": "Creates",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 439,
							"name": "Creates",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a set of new groups.",
								"returns": "Ture if all groups were successfully created.\n"
							},
							"parameters": [
								{
									"id": 440,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to create groups in."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 441,
									"name": "names",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 55,
							"character": 23
						}
					]
				},
				{
					"id": 431,
					"name": "GetNames",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 432,
							"name": "GetNames",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the names of all the groups in the model.",
								"returns": "List of group names\n"
							},
							"parameters": [
								{
									"id": 433,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get group names from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 26,
							"character": 24
						}
					]
				},
				{
					"id": 442,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 443,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes a group from the model.",
								"returns": "True if the group was successfully deleted.\n"
							},
							"parameters": [
								{
									"id": 444,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model containing the groups."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 445,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group name to delete."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 446,
									"name": "delete_geom",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "If true, the objects and points in teh group will be deleted."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 77,
							"character": 19
						}
					]
				},
				{
					"id": 447,
					"name": "getParent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 448,
							"name": "getParent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the parent of a group.\nReturns null if specified group does not have a parent group.",
								"returns": "Parent group of specified group if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 449,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model containing the groups."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 450,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group name to get parent for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 95,
							"character": 25
						}
					]
				},
				{
					"id": 451,
					"name": "setParent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 452,
							"name": "setParent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the parent of a group.",
								"returns": "The old parent.\n"
							},
							"parameters": [
								{
									"id": 453,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model containing the groups."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 454,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group name to set parent for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 455,
									"name": "parent_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group name of parent."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 109,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						434,
						438,
						431,
						442,
						447,
						451
					]
				}
			],
			"sources": [
				{
					"fileName": "group.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 456,
			"name": "\"intersect\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/intersect.ts",
			"comment": {
				"shortText": "Function for intersecting geometric objects."
			},
			"children": [
				{
					"id": 457,
					"name": "circleCircle2D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 458,
							"name": "circleCircle2D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the intersection points and/or overlapping arcs of two intersecting co-planar conic curves",
								"text": "List of points returned is in order (starts from t=0 to t=1 of curve_1)<br/>\nConic curves must lie on the same plane<br/>\nReturns null if conic curves are not co-planar<br/>\nReturns null if conic curves do not intersect",
								"returns": "List of intersection points and/or overlapping arcs if successful,\n         null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 459,
									"name": "circle1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Conic curve 1"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 460,
									"name": "circle2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Conic curve 2"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "intersect.ts",
							"line": 34,
							"character": 30
						}
					]
				},
				{
					"id": 461,
					"name": "circlePlane3D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 462,
							"name": "circlePlane3D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "List of intersection points and/or overlapping arcs if successful,\n         null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 463,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Conic curve 1"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 464,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Conic curve 2"
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "intersect.ts",
							"line": 46,
							"character": 29
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						457,
						461
					]
				}
			],
			"sources": [
				{
					"fileName": "intersect.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 935,
			"name": "\"libs/arr/arr\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/libs/arr/arr.ts",
			"children": [
				{
					"id": 936,
					"name": "Arr",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A set of static methods for working with arrays of simple types.\nThe arrays can be nested, but they do not contain any objects."
					},
					"children": [
						{
							"id": 961,
							"name": "deepCopy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 962,
									"name": "deepCopy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Make a copy of an nD array.\nIf the input is not an array, then just return the same thing.\nA new array is returned. The input array remains unchanged.\nIf the input array is undefined, an empty array is returned.\nIf the input is s sparse array, then the output will alos be a sparse array.",
										"returns": "The new nD array.\n"
									},
									"parameters": [
										{
											"id": 963,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The nD array to copy."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "libs/arr/arr.ts",
									"line": 106,
									"character": 26
								}
							]
						},
						{
							"id": 968,
							"name": "deepCount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 969,
									"name": "deepCount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Counts the number of values in an nD array .\nThe input array remains unchanged.\nIf the input array is undefined, 0 is returned.\nThe input can be a sparse array. Undefined values are ignored.\nFor example, for [1, 2, , , 3], the count will be 3.",
										"returns": "The number of elements in the nD array.\n"
									},
									"parameters": [
										{
											"id": 970,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The nD array to count."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "libs/arr/arr.ts",
									"line": 150,
									"character": 27
								}
							]
						},
						{
							"id": 964,
							"name": "deepFill",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 965,
									"name": "deepFill",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fills an nD array with new values (all the same value).\nThe input array is changed.\nIf the input array is undefined, an empty array is returned.\nThe input can be a sparse array."
									},
									"parameters": [
										{
											"id": 966,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The nD array to fill."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 967,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to insert into the array.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "libs/arr/arr.ts",
									"line": 129,
									"character": 26
								}
							]
						},
						{
							"id": 944,
							"name": "equal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 945,
									"name": "equal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Check if two nD arrays are equal (i.e. that all elements in the array are equal, ===.).\nIf the arrays are unequal in length, false is returned.\nElements in the array can have any value.",
										"returns": "True or false.\n"
									},
									"parameters": [
										{
											"id": 946,
											"name": "arr1",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The first value."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 947,
											"name": "arr2",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The second values."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "libs/arr/arr.ts",
									"line": 34,
									"character": 23
								}
							]
						},
						{
							"id": 957,
							"name": "flatten",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 958,
									"name": "flatten",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Take an nD array and flattens it.\nA new array is returned. The input array remains unchanged.\nFor example, [1, 2, [3, 4], [5, 6]] will become [1, 2, 3, 4, 5, 6].\nIf the input array is undefined, an empty array is returned.",
										"returns": "A new 1D array.\n"
									},
									"parameters": [
										{
											"id": 959,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The multidimensional array to flatten."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 960,
											"name": "depth",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "libs/arr/arr.ts",
									"line": 86,
									"character": 25
								}
							]
						},
						{
							"id": 948,
							"name": "indexOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 949,
									"name": "indexOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Find the position of the first occurrence of a specified value in an array.\nThe value can be an array (which is not the case for Array.indexOf()).\nIf the value is not found or is undefined, return -1.\nIf the array is null or undefined, return -1.",
										"returns": "The index in the array of the first occurance of the value.\n"
									},
									"parameters": [
										{
											"id": 950,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 951,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value, can be a value or a 1D array of values."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "libs/arr/arr.ts",
									"line": 50,
									"character": 25
								}
							]
						},
						{
							"id": 937,
							"name": "make",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 938,
									"name": "make",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Make an array of numbers. All elements in the array will have the same value.",
										"returns": "The resulting array.\n"
									},
									"parameters": [
										{
											"id": 939,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the new array. If length is 0, then an empty array is returned."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 940,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The values in the array."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "libs/arr/arr.ts",
									"line": 13,
									"character": 22
								}
							]
						},
						{
							"id": 941,
							"name": "makeSeq",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 942,
									"name": "makeSeq",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Make an array of numbers. All elements in the array will be a numerical sequence, 0, 1, 2, 3....",
										"returns": "The resulting array.\n"
									},
									"parameters": [
										{
											"id": 943,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The length of the new array. If length is 0, then an empty array is returned."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "libs/arr/arr.ts",
									"line": 22,
									"character": 25
								}
							]
						},
						{
							"id": 952,
							"name": "replace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 953,
									"name": "replace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Replace all occurrences of a specified value in an array.\nThe input array is changed.\nThe value can be an array.\nIf the value is not found or is undefined, return -1."
									},
									"parameters": [
										{
											"id": 954,
											"name": "arr",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The array.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 955,
											"name": "old_value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The old value to replace."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 956,
											"name": "new_value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The new value."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "libs/arr/arr.ts",
									"line": 69,
									"character": 25
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								961,
								968,
								964,
								944,
								957,
								948,
								937,
								941,
								952
							]
						}
					],
					"sources": [
						{
							"fileName": "libs/arr/arr.ts",
							"line": 6,
							"character": 16
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						936
					]
				}
			],
			"sources": [
				{
					"fileName": "libs/arr/arr.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 202,
			"name": "\"libs/conics/conics\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/libs/conics/conics.ts",
			"children": [
				{
					"id": 203,
					"name": "EPS",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 13,
							"character": 9
						}
					],
					"type": {
						"type": "unknown",
						"name": "0.000001"
					},
					"defaultValue": "0.000001"
				},
				{
					"id": 263,
					"name": "Function_F",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 264,
							"name": "Function_F",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 265,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 756,
							"character": 26
						}
					]
				},
				{
					"id": 250,
					"name": "General_Form",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 251,
							"name": "General_Form",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 252,
									"name": "conic1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 253,
									"name": "origin1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 254,
									"name": "origin2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 255,
									"name": "alpha",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 553,
							"character": 28
						}
					]
				},
				{
					"id": 256,
					"name": "Split",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 257,
							"name": "Split",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 258,
									"name": "conic1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 259,
									"name": "conic2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 260,
									"name": "origin1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 261,
									"name": "origin2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 262,
									"name": "alpha",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 609,
							"character": 21
						}
					]
				},
				{
					"id": 204,
					"name": "_circleCenterFrom3Points",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 205,
							"name": "_circleCenterFrom3Points",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Find the center of a circle that passes through three XYZ positions in 3D space.",
								"returns": "An array of intersection points\n"
							},
							"parameters": [
								{
									"id": 206,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 207,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 208,
									"name": "c",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 19,
							"character": 33
						}
					]
				},
				{
					"id": 209,
					"name": "_circleFrom3Points",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 210,
							"name": "_circleFrom3Points",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 211,
									"name": "xyz1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 212,
									"name": "xyz2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 213,
									"name": "xyz3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 214,
									"name": "is_closed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 215,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 219,
											"name": "angle",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "libs/conics/conics.ts",
													"line": 47,
													"character": 60
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 216,
											"name": "origin",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "libs/conics/conics.ts",
													"line": 47,
													"character": 15
												}
											],
											"type": {
												"type": "reference",
												"name": "gs.XYZ"
											}
										},
										{
											"id": 217,
											"name": "vec_x",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "libs/conics/conics.ts",
													"line": 47,
													"character": 30
												}
											],
											"type": {
												"type": "reference",
												"name": "gs.XYZ"
											}
										},
										{
											"id": 218,
											"name": "vec_y",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "libs/conics/conics.ts",
													"line": 47,
													"character": 45
												}
											],
											"type": {
												"type": "reference",
												"name": "gs.XYZ"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												219,
												216,
												217,
												218
											]
										}
									],
									"sources": [
										{
											"fileName": "libs/conics/conics.ts",
											"line": 46,
											"character": 97
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 46,
							"character": 34
						}
					]
				},
				{
					"id": 220,
					"name": "_isectCircleCircle2D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 221,
							"name": "_isectCircleCircle2D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Circle-circle intersection",
								"returns": "An array of intersection points\n"
							},
							"parameters": [
								{
									"id": 222,
									"name": "circle1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 223,
									"name": "circle2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 113,
							"character": 36
						}
					]
				},
				{
					"id": 234,
					"name": "_isectCircleEllipse2D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 235,
							"name": "_isectCircleEllipse2D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Circle-ellipse intersection",
								"returns": "An array of intersection points\n"
							},
							"parameters": [
								{
									"id": 236,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 237,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 435,
							"character": 37
						}
					]
				},
				{
					"id": 232,
					"name": "_isectCircleLine2D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 233,
							"name": "_isectCircleLine2D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Circle-Line intersection",
								"returns": "An array of intersection points\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 420,
							"character": 34
						}
					]
				},
				{
					"id": 224,
					"name": "_isectCirclePlane3D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 225,
							"name": "_isectCirclePlane3D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Circle-Plane intersection",
								"returns": "Adds intersecting points to the geometry if successfull, [] if empty or coplanar\n"
							},
							"parameters": [
								{
									"id": 226,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 227,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 228,
							"character": 35
						}
					]
				},
				{
					"id": 238,
					"name": "_isectEllipseEllipse2D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 239,
							"name": "_isectEllipseEllipse2D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Circle-ellipse intersection",
								"returns": "An array of intersection points\n"
							},
							"parameters": [
								{
									"id": 240,
									"name": "ellipse1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								},
								{
									"id": 241,
									"name": "ellipse2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 447,
							"character": 38
						}
					]
				},
				{
					"id": 228,
					"name": "_isectEllipsePlane3D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 229,
							"name": "_isectEllipsePlane3D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Ellipse-Plane intersection",
								"returns": "Adds intersecting points to the geometry if successfull, null if empty or coplanar\n"
							},
							"parameters": [
								{
									"id": 230,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								},
								{
									"id": 231,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 302,
							"character": 36
						}
					]
				},
				{
					"id": 242,
					"name": "distBetweenPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 243,
							"name": "distBetweenPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Calculates distance between two points or two clusters of points",
								"returns": "Dist0ance between points if successful, none if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 244,
									"name": "point_1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								},
								{
									"id": 245,
									"name": "point_2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								},
								{
									"id": 246,
									"name": "minimum",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 460,
							"character": 33
						}
					]
				},
				{
					"id": 271,
					"name": "ellipse_length",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 272,
							"name": "ellipse_length",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 273,
									"name": "conic",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 274,
									"name": "theta_1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 275,
									"name": "theta_2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 778,
							"character": 30
						}
					]
				},
				{
					"id": 276,
					"name": "hyperbola_length",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 277,
							"name": "hyperbola_length",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 278,
									"name": "conic",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 279,
									"name": "theta_1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 280,
									"name": "theta_2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 798,
							"character": 32
						}
					]
				},
				{
					"id": 247,
					"name": "identifier",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 248,
							"name": "identifier",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 249,
									"name": "coeff",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 478,
							"character": 26
						}
					]
				},
				{
					"id": 266,
					"name": "parabola_lenght",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 267,
							"name": "parabola_lenght",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 268,
									"name": "conic",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 269,
									"name": "x1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 270,
									"name": "x2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 763,
							"character": 31
						}
					]
				},
				{
					"id": 281,
					"name": "plineLength",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 282,
							"name": "plineLength",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns length of a polyline object",
								"returns": "Length of polyline as number if successful, none if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 283,
									"name": "m",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 284,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 285,
									"name": "segment_index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline segment index."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 286,
									"name": "sub_domain",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of two numbers identifying the subdomain of the curve to calculate.\nAscending order. If omitted, entire polyline length is used. (optional, omit?)"
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/conics.ts",
							"line": 836,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						203
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						263,
						250,
						256,
						204,
						209,
						220,
						234,
						232,
						224,
						238,
						228,
						242,
						271,
						276,
						247,
						266,
						281
					]
				}
			],
			"sources": [
				{
					"fileName": "libs/conics/conics.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 196,
			"name": "\"libs/conics/trigo\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/libs/conics/trigo.ts",
			"children": [
				{
					"id": 197,
					"name": "_solve_trigo",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 198,
							"name": "_solve_trigo",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Solves exact solutions of the trigonometric equation A + B.cos(t) + C.sin(t) = 0",
								"returns": "a set of 2 real numbers solutions of the equation\n"
							},
							"parameters": [
								{
									"id": 199,
									"name": "A",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 200,
									"name": "B",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 201,
									"name": "C",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/conics/trigo.ts",
							"line": 10,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						197
					]
				}
			],
			"sources": [
				{
					"fileName": "libs/conics/trigo.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 421,
			"name": "\"libs/filesys/filesys\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/libs/filesys/filesys.ts",
			"children": [
				{
					"id": 426,
					"name": "writeGsToJSONFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 427,
							"name": "writeGsToJSONFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Write a file."
							},
							"parameters": [
								{
									"id": 428,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 429,
									"name": "filename",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/filesys/filesys.ts",
							"line": 22,
							"character": 33
						}
					]
				},
				{
					"id": 422,
					"name": "writeThreeToJSONFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 423,
							"name": "writeThreeToJSONFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Write a file."
							},
							"parameters": [
								{
									"id": 424,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 425,
									"name": "filename",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/filesys/filesys.ts",
							"line": 7,
							"character": 36
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						426,
						422
					]
				}
			],
			"sources": [
				{
					"fileName": "libs/filesys/filesys.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 528,
			"name": "\"libs/poly/poly\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/libs/poly/poly.ts",
			"children": [
				{
					"id": 529,
					"name": "EPS",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "libs/poly/poly.ts",
							"line": 5,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0.000001"
				},
				{
					"id": 530,
					"name": "getVertexNormal",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 531,
							"name": "getVertexNormal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get a normal from a face vertex"
							},
							"parameters": [
								{
									"id": 532,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IVertex"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vector3"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/poly/poly.ts",
							"line": 10,
							"character": 31
						}
					]
				},
				{
					"id": 547,
					"name": "pointsEvaluate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 548,
							"name": "pointsEvaluate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Evaluates the position between a sequence of points.\nA new point is always created."
							},
							"parameters": [
								{
									"id": 549,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								},
								{
									"id": 550,
									"name": "t_param",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/poly/poly.ts",
							"line": 92,
							"character": 30
						}
					]
				},
				{
					"id": 541,
					"name": "pointsExtend",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 542,
							"name": "pointsExtend",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Moves the end point away from the start point by distance.\nIf create_point is true, then a new point get created, otherwise the existing point gets moved."
							},
							"parameters": [
								{
									"id": 543,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 544,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 545,
									"name": "distance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 546,
									"name": "create",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/poly/poly.ts",
							"line": 73,
							"character": 28
						}
					]
				},
				{
					"id": 537,
					"name": "pointsLoft",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 538,
							"name": "pointsLoft",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": " Generate a nested list of points, ready for creating polymesh faces."
							},
							"parameters": [
								{
									"id": 539,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"name": "IPoint"
											}
										}
									}
								},
								{
									"id": 540,
									"name": "is_closed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/poly/poly.ts",
							"line": 53,
							"character": 26
						}
					]
				},
				{
					"id": 533,
					"name": "pointsLoftLoop",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 534,
							"name": "pointsLoftLoop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": " Loop through a list of list of points, and loft.\n The lists represent rows, each row has sub lists. The sub lists get lofted."
							},
							"parameters": [
								{
									"id": 535,
									"name": "points_lists",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IPoint"
												}
											}
										}
									}
								},
								{
									"id": 536,
									"name": "is_closed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/poly/poly.ts",
							"line": 37,
							"character": 30
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						529
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						530,
						547,
						541,
						537,
						533
					]
				}
			],
			"sources": [
				{
					"fileName": "libs/poly/poly.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 50,
			"name": "\"libs/threex/threex\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/libs/threex/threex.ts",
			"children": [
				{
					"id": 51,
					"name": "EPS",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "Utility functions for threejs."
					},
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 8,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0.000001"
				},
				{
					"id": 151,
					"name": "addPointXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 152,
							"name": "addPointXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 153,
									"name": "p1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 154,
									"name": "xyz_vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 148,
							"character": 27
						}
					]
				},
				{
					"id": 146,
					"name": "addPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 147,
							"name": "addPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 148,
									"name": "p1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 149,
									"name": "p2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 150,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 143,
							"character": 25
						}
					]
				},
				{
					"id": 92,
					"name": "addVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 93,
							"name": "addVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 94,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								},
								{
									"id": 95,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								},
								{
									"id": 96,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "Vector3"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 78,
							"character": 26
						}
					]
				},
				{
					"id": 168,
					"name": "addVertices",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 169,
							"name": "addVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 170,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IVertex"
									}
								},
								{
									"id": 171,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IVertex"
									}
								},
								{
									"id": 172,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 180,
							"character": 27
						}
					]
				},
				{
					"id": 121,
					"name": "addXYZs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 122,
							"name": "addXYZs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 123,
									"name": "xyz1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 124,
									"name": "xyz2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 125,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 116,
							"character": 23
						}
					]
				},
				{
					"id": 97,
					"name": "crossVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 98,
							"name": "crossVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 99,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								},
								{
									"id": 100,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								},
								{
									"id": 101,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "Vector3"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 85,
							"character": 28
						}
					]
				},
				{
					"id": 126,
					"name": "crossXYZs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 127,
							"name": "crossXYZs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 128,
									"name": "xyz1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 129,
									"name": "xyz2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 130,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 120,
							"character": 25
						}
					]
				},
				{
					"id": 102,
					"name": "dotVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 103,
							"name": "dotVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 104,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								},
								{
									"id": 105,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 92,
							"character": 26
						}
					]
				},
				{
					"id": 131,
					"name": "dotXYZs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 132,
							"name": "dotXYZs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 133,
									"name": "xyz1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 134,
									"name": "xyz2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 124,
							"character": 23
						}
					]
				},
				{
					"id": 138,
					"name": "lengthXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 139,
							"name": "lengthXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 140,
									"name": "xyz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 132,
							"character": 25
						}
					]
				},
				{
					"id": 173,
					"name": "makeVertices2D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 174,
							"name": "makeVertices2D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Transform a set of vertices in 3d space onto the xy plane. This function assumes that the vertices\nare co-planar. Returns a set of three Vectors that represent points on the xy plane."
							},
							"parameters": [
								{
									"id": 175,
									"name": "vertices",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IVertex"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Vector3"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 191,
							"character": 30
						}
					]
				},
				{
					"id": 65,
					"name": "matrixInverse",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 66,
							"name": "matrixInverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 67,
									"name": "m",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Matrix4"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Matrix4"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 40,
							"character": 29
						}
					]
				},
				{
					"id": 159,
					"name": "movePointsAddXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 160,
							"name": "movePointsAddXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 161,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IPoint"
												}
											},
											{
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "reference",
														"name": "IPoint"
													}
												}
											}
										]
									}
								},
								{
									"id": 162,
									"name": "xyz_vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 156,
							"character": 32
						}
					]
				},
				{
					"id": 52,
					"name": "multVectorMatrix",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 53,
							"name": "multVectorMatrix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 54,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								},
								{
									"id": 55,
									"name": "m",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Matrix4"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vector3"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 12,
							"character": 32
						}
					]
				},
				{
					"id": 135,
					"name": "normalizeXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 136,
							"name": "normalizeXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 137,
									"name": "xyz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 128,
							"character": 28
						}
					]
				},
				{
					"id": 68,
					"name": "orthoVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 69,
							"name": "orthoVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 70,
									"name": "vector1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								},
								{
									"id": 71,
									"name": "vector2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vector3"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 47,
							"character": 28
						}
					]
				},
				{
					"id": 176,
					"name": "planesAreCoplanar",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 177,
							"name": "planesAreCoplanar",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check a point is on a plane.\nThe plane is represented by an origin and a normal."
							},
							"parameters": [
								{
									"id": 178,
									"name": "origin1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 179,
									"name": "normal1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 180,
									"name": "origin2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 181,
									"name": "normal2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 226,
							"character": 33
						}
					]
				},
				{
					"id": 182,
					"name": "pointIsOnPlane",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 183,
							"name": "pointIsOnPlane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check a point is on a plane.\nThe plane is represented by an origin and a normal."
							},
							"parameters": [
								{
									"id": 184,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 185,
									"name": "normal",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 186,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 243,
							"character": 30
						}
					]
				},
				{
					"id": 155,
					"name": "subPointXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 156,
							"name": "subPointXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 157,
									"name": "p1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 158,
									"name": "xyz_vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 152,
							"character": 27
						}
					]
				},
				{
					"id": 141,
					"name": "subPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 142,
							"name": "subPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 143,
									"name": "p1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 144,
									"name": "p2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 145,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 138,
							"character": 25
						}
					]
				},
				{
					"id": 87,
					"name": "subVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 88,
							"name": "subVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 89,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								},
								{
									"id": 90,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								},
								{
									"id": 91,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "Vector3"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 71,
							"character": 26
						}
					]
				},
				{
					"id": 163,
					"name": "subVertices",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 164,
							"name": "subVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 165,
									"name": "v1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IVertex"
									}
								},
								{
									"id": 166,
									"name": "v2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IVertex"
									}
								},
								{
									"id": 167,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 175,
							"character": 27
						}
					]
				},
				{
					"id": 116,
					"name": "subXYZs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 117,
							"name": "subXYZs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 118,
									"name": "xyz1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 119,
									"name": "xyz2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 120,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 112,
							"character": 23
						}
					]
				},
				{
					"id": 78,
					"name": "vectorFromPoint",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 79,
							"name": "vectorFromPoint",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 80,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vector3"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 59,
							"character": 31
						}
					]
				},
				{
					"id": 106,
					"name": "vectorFromPointsAtoB",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 107,
							"name": "vectorFromPointsAtoB",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 108,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 109,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 110,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "Vector3"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 96,
							"character": 36
						}
					]
				},
				{
					"id": 75,
					"name": "vectorFromVertex",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 76,
							"name": "vectorFromVertex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 77,
									"name": "vertex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IVertex"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vector3"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 55,
							"character": 32
						}
					]
				},
				{
					"id": 111,
					"name": "vectorFromVerticesAtoB",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 112,
							"name": "vectorFromVerticesAtoB",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 113,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IVertex"
									}
								},
								{
									"id": 114,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IVertex"
									}
								},
								{
									"id": 115,
									"name": "norm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "Vector3"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 103,
							"character": 38
						}
					]
				},
				{
					"id": 72,
					"name": "vectorNegate",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 73,
							"name": "vectorNegate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 74,
									"name": "vector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Vector3"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 51,
							"character": 28
						}
					]
				},
				{
					"id": 187,
					"name": "vectorsAreCodir",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 188,
							"name": "vectorsAreCodir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if vectors are same dir."
							},
							"parameters": [
								{
									"id": 189,
									"name": "xyz1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 190,
									"name": "xyz2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 254,
							"character": 31
						}
					]
				},
				{
					"id": 84,
					"name": "vectorsFromPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 85,
							"name": "vectorsFromPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 86,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Vector3"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 67,
							"character": 33
						}
					]
				},
				{
					"id": 81,
					"name": "vectorsFromVertices",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 82,
							"name": "vectorsFromVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 83,
									"name": "vertices",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IVertex"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Vector3"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 63,
							"character": 35
						}
					]
				},
				{
					"id": 60,
					"name": "xformMatrix",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 61,
							"name": "xformMatrix",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 62,
									"name": "o",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								},
								{
									"id": 63,
									"name": "x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								},
								{
									"id": 64,
									"name": "y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Vector3"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Matrix4"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 26,
							"character": 27
						}
					]
				},
				{
					"id": 56,
					"name": "xformMatrixPointXYZs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 57,
							"name": "xformMatrixPointXYZs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 58,
									"name": "o",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 59,
									"name": "vecs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "gs.XYZ"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Matrix4"
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/threex/threex.ts",
							"line": 18,
							"character": 36
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						51
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						151,
						146,
						92,
						168,
						121,
						97,
						126,
						102,
						131,
						138,
						173,
						65,
						159,
						52,
						135,
						68,
						176,
						182,
						155,
						141,
						87,
						163,
						116,
						78,
						106,
						75,
						111,
						72,
						187,
						84,
						81,
						60,
						56
					]
				}
			],
			"sources": [
				{
					"fileName": "libs/threex/threex.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 971,
			"name": "\"libs/xform/xform\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/libs/xform/xform.ts",
			"children": [
				{
					"id": 972,
					"name": "xfromXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 973,
							"name": "xfromXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 974,
									"name": "xyz_list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "gs.XYZ"
										}
									}
								},
								{
									"id": 975,
									"name": "from_origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 976,
									"name": "from_vectors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "gs.XYZ"
										}
									}
								},
								{
									"id": 977,
									"name": "to_origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 978,
									"name": "to_vectors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "gs.XYZ"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/xform/xform.ts",
							"line": 4,
							"character": 24
						}
					]
				},
				{
					"id": 979,
					"name": "xfromXYZfromGlobal",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 980,
							"name": "xfromXYZfromGlobal",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 981,
									"name": "xyz_list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "gs.XYZ"
										}
									}
								},
								{
									"id": 982,
									"name": "to_origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 983,
									"name": "to_vectors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "gs.XYZ"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "libs/xform/xform.ts",
							"line": 38,
							"character": 34
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						972,
						979
					]
				}
			],
			"sources": [
				{
					"fileName": "libs/xform/xform.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 744,
			"name": "\"list\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/list.ts",
			"children": [
				{
					"id": 745,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 746,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new list by making a copy of an existing list.",
								"returns": "New duplicated list.\n\n<h3>Example:</h3>\n<code>\nlist = [1,2,3]<br/>\ncopy = List.Copy(list)</code><br/><br/>\nExpected value of copy is [1,2,3].\n"
							},
							"parameters": [
								{
									"id": 747,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to copy."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 33,
							"character": 20
						}
					]
				},
				{
					"id": 748,
					"name": "FromRange",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 749,
							"name": "FromRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new list of integer numbers between two bounds.\nLower bound is inclusive and upper bound is exclusive.",
								"returns": "New list.\n\n<h3>Example: </h3>\n<code>\nlist = List.FromRange(0,5)</code><br/><br/>\nExpected value of list is [0,1,2,3,4].\n"
							},
							"parameters": [
								{
									"id": 750,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Lower bound integer."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 751,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Upper bound integer."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 51,
							"character": 25
						}
					]
				},
				{
					"id": 755,
					"name": "append",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 756,
							"name": "append",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds an item to the end of a list.\nIf item is a list, the entire list will be appended as one item.",
								"returns": "New list with added item.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nappend = List.append(list,4)</code><br/><br/>\nExpected value of list is [1,2,3,4].\n"
							},
							"parameters": [
								{
									"id": 757,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 758,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Item to add."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 92,
							"character": 22
						}
					]
				},
				{
					"id": 759,
					"name": "appendFront",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 760,
							"name": "appendFront",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds an item to the front of a list.\nIf the item is a list, the entire list will be appended as one item.",
								"returns": "New list with added item.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nappend = List.appendFront(list,4)</code><br/><br/>\nExpected value of list is [4,1,2,3].\n"
							},
							"parameters": [
								{
									"id": 761,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 762,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Item to add."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 114,
							"character": 27
						}
					]
				},
				{
					"id": 763,
					"name": "extend",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 764,
							"name": "extend",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds items (from a list) to the end of an list.\nItems are added to list individually as seperate items.",
								"returns": "List with added items.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nlist2 = [9,0]<br/>\nextend = List.extend(list,list2)</code><br/><br/>\nExpected value of extend is [1,2,3,9,0].\n"
							},
							"parameters": [
								{
									"id": 765,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 766,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of items to add."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 137,
							"character": 22
						}
					]
				},
				{
					"id": 767,
					"name": "extendFront",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 768,
							"name": "extendFront",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds items (from a list) to the front of an list.\nItems are added to list individually as seperate items.",
								"returns": "List with added items.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nlist2 = [9,0]<br/>\nextend = List.extend(list,list2)</code><br/><br/>\nExpected value of extend is [9,0,1,2,3].\n"
							},
							"parameters": [
								{
									"id": 769,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 770,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of items to add."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 158,
							"character": 27
						}
					]
				},
				{
					"id": 771,
					"name": "flatten",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 772,
							"name": "flatten",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Flattens an n-dimensional list into a one-dimensional list.",
								"returns": "Flattened list.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3,[4,5]]<br/>\nflatten = List.flatten(list)</code><br/><br/>\nExpected value of list is [1,2,3,4,5].\n"
							},
							"parameters": [
								{
									"id": 773,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to flatten."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 176,
							"character": 23
						}
					]
				},
				{
					"id": 752,
					"name": "len",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 753,
							"name": "len",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of items in an list.",
								"returns": "Length of the list.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nlen = List.len(list)</code><br/><br/>\nExpected value of len is 3.\n"
							},
							"parameters": [
								{
									"id": 754,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 73,
							"character": 19
						}
					]
				},
				{
					"id": 774,
					"name": "removeIndex",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 775,
							"name": "removeIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the item at the specified index from a list.",
								"returns": "List with item removed.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nremove = List.removeIndex(list,1)</code><br/><br/>\nExpected value of list is [1,3].\n"
							},
							"parameters": [
								{
									"id": 776,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to remove item from."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 777,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index number of item to remove."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 194,
							"character": 27
						}
					]
				},
				{
					"id": 778,
					"name": "removeValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 779,
							"name": "removeValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes items that match specified value from a list.\nItems must match both the value and type of specified value<br/>",
								"text": "Returns original list if no items in list match specified value.\n",
								"returns": "List with item removed\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,2,3]<br/>\nremove = List.removeValue(list,2,true)</code><br/><br/>\nExpected value of list is [1,3].\n"
							},
							"parameters": [
								{
									"id": 780,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to remove item from."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 781,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Value to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 782,
									"name": "remove_all",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Removes all instances of specified value if true, removes only the first instance if\n     false."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 220,
							"character": 27
						}
					]
				},
				{
					"id": 783,
					"name": "reverse",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 784,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverses the order of items in an list.",
								"returns": "New reversed list.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nresult = List.reverse(list)</code><br/><br/>\nExpected value of result is [3,2,1].\n"
							},
							"parameters": [
								{
									"id": 785,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to reverse."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 245,
							"character": 23
						}
					]
				},
				{
					"id": 792,
					"name": "slice",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 793,
							"name": "slice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a copy of a portion of a list, from start index to end index (end not included).",
								"returns": "A new list.\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3,4,5]<br/>\nresult = List.slice(list,1,3)</code><br/><br/>\nExpected value of result is [2,3].\n"
							},
							"parameters": [
								{
									"id": 794,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to slice."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 795,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index at which to begin slicing.\n     A negative index can be used, indicating an offset from the end of the sequence.\n     If start is undefined, slice begins from index 0."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 796,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index before which to end slicing. Slice extracts up to but not including end.\n     A negative index can be used, indicating an offset from the end of the sequence.\n     If end is undefined, slice extracts through the end of the sequence."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 313,
							"character": 21
						}
					]
				},
				{
					"id": 786,
					"name": "sortAlpha",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 787,
							"name": "sortAlpha",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts a list of strings alphabetically.\nIf items are not strings, they are treated as strings.<br/>",
								"text": "Items are sorted according to string Unicode code points (character by character, numbers before upper case\nalphabets, upper case alphabets before lower case alphabets)\n",
								"returns": "New sorted list.\n\n<h3>Example: </h3>\n<code>\nlist = [\"1\",\"2\",\"10\",\"Orange\",\"apple\"]<br/>\nsort = List.sortAlpha(list)</code><br/><br/>\nExpected value of list is [\"1\",\"10\",\"2\",\"Orange\",\"apple\"].\n"
							},
							"parameters": [
								{
									"id": 788,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to sort."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 268,
							"character": 25
						}
					]
				},
				{
					"id": 789,
					"name": "sortNum",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 790,
							"name": "sortNum",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts a list of numbers in ascending order.\nThe list must contain numbers.",
								"returns": "New sorted list.\n\n<h3>Example: </h3>\n<code>\nlist = [56,6,48]<br/>\nsort = List.sortNum(list)</code><br/><br/>\nExpected value of list is [6,48,56].\n"
							},
							"parameters": [
								{
									"id": 791,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 288,
							"character": 23
						}
					]
				},
				{
					"id": 797,
					"name": "splice",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 798,
							"name": "splice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds and/or removes items to/from a list.",
								"text": "If no items_to_add are specified, then items are only removed.\nIf num_to_remove is 0, then items are only added.<br/>\n",
								"returns": "A new list.\n\n<h3>Example: </h3>\n<code>\nlist = [10, 20, 30, 40, 50]<br/>\nresult = List.splice(list, 1, 3, [2.2, 3.3])</code><br/><br/>\nExpected value of result is [10, 2.2, 3.2, 50].\n"
							},
							"parameters": [
								{
									"id": 799,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to splice"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 800,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index at which to add/remove items. (Items are added/removed after specified index)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 801,
									"name": "num_to_remove",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number of items to remove."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 802,
									"name": "items_to_add",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of items to add."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 339,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						745,
						748,
						755,
						759,
						763,
						767,
						771,
						752,
						774,
						778,
						783,
						792,
						786,
						789,
						797
					]
				}
			],
			"sources": [
				{
					"fileName": "list.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 803,
			"name": "\"math\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/math.ts",
			"children": [
				{
					"id": 808,
					"name": "NEG_INF",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 809,
							"name": "NEG_INF",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value of negative infinity",
								"returns": "Value of negative infinity\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 29,
							"character": 23
						}
					]
				},
				{
					"id": 804,
					"name": "PI",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 805,
							"name": "PI",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value of PI.",
								"returns": "Value of pi\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 13,
							"character": 18
						}
					]
				},
				{
					"id": 806,
					"name": "POS_INF",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 807,
							"name": "POS_INF",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value of positive infinity",
								"returns": "Value of positive infinity\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 21,
							"character": 23
						}
					]
				},
				{
					"id": 829,
					"name": "abs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 830,
							"name": "abs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the absolute value of a number.",
								"text": "Returns num if num is positive, -num if num is negative and 0 if num=0<br/>\n",
								"returns": "A number representing the absolute value of the specified number.\n\n<h3>Example:</h3>\n<code>\nnum1 = Math.abs(-1.234)\nnum2 = Math.abs(2.345)<br/>\n</code><br/><br/>\nExpected value of num1 is 1.234, and of num2 is 2.345.\n"
							},
							"parameters": [
								{
									"id": 831,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 142,
							"character": 19
						}
					]
				},
				{
					"id": 823,
					"name": "ceiling",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 824,
							"name": "ceiling",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rounds a number up to the nearest integer.",
								"returns": "A number representing the smallest integer more than or equal to the specified number.\n\n<h3>Example:</h3>\n<code>\nnum = Math.ceiling(4.3)</code><br/><br/>\nExpected value of num is 5.\n"
							},
							"parameters": [
								{
									"id": 825,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 104,
							"character": 23
						}
					]
				},
				{
					"id": 810,
					"name": "cos",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 811,
							"name": "cos",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the cosine of a specified angle in degrees.",
								"returns": "Cosine of angle.\n"
							},
							"parameters": [
								{
									"id": 812,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Angle in degrees."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 44,
							"character": 19
						}
					]
				},
				{
					"id": 826,
					"name": "floor",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 827,
							"name": "floor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rounds a number down to the nearest integer.",
								"returns": "A number representing the largest integer less than or equal to the specified number.\n\n<h3>Example:</h3>\n<code>\nnum = Math.floor(4.3)</code><br/><br/>\nExpected value of num is 4.\n"
							},
							"parameters": [
								{
									"id": 828,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 121,
							"character": 21
						}
					]
				},
				{
					"id": 832,
					"name": "max",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 833,
							"name": "max",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the largest number in a list of numbers.",
								"returns": "A number representing the largest number in specified list of numbers.\n\n<h3>Example:</h3>\n<code>\nlist = [8,9,6,1,3]<br/>\nnum = Math.max(list)</code><br/><br/>\nExpected value of num is 9.\n"
							},
							"parameters": [
								{
									"id": 834,
									"name": "nums",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of numbers."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 160,
							"character": 19
						}
					]
				},
				{
					"id": 835,
					"name": "min",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 836,
							"name": "min",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the smallest number in a list of numbers.",
								"returns": "A number representing the smallest number in specified list of numbers.\n\n<h3>Example:</h3>\n<code>\nlist = [8,9,6,1,3]<br/>\nnum = Math.max(list)</code><br/><br/>\nExpected value of num is 1.\n"
							},
							"parameters": [
								{
									"id": 837,
									"name": "nums",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 184,
							"character": 19
						}
					]
				},
				{
					"id": 819,
					"name": "pow",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 820,
							"name": "pow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a number representing the given base taken to the power of the given exponent.",
								"returns": "Number representing the given base taken to the power of the given exponent.\n\n<h3>Example:</h3>\n<code>\nnum = Math.pow(2,3)</code><br/><br/>\nExpected value of num is 8.\n"
							},
							"parameters": [
								{
									"id": 821,
									"name": "base",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Base number."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 822,
									"name": "exponent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Power of exponent."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 86,
							"character": 19
						}
					]
				},
				{
					"id": 838,
					"name": "rand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 839,
							"name": "rand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a pseudo-random number between 0 (inclusive) and 1 (exclusive).",
								"returns": "A pseudo-random number.\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 201,
							"character": 20
						}
					]
				},
				{
					"id": 844,
					"name": "randFloat",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 845,
							"name": "randFloat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a pseudo-random floating point number between two numbers.",
								"returns": "A pseudo-random floating point number.\n"
							},
							"parameters": [
								{
									"id": 846,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Lower bound of range."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 847,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Upper bound of range."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 229,
							"character": 25
						}
					]
				},
				{
					"id": 840,
					"name": "randInt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 841,
							"name": "randInt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a pseudo-random integer number between two numbers.",
								"text": "Lower bound number is inclusive and upper bound number is exclusive.",
								"returns": "A pseudo-random integer number.\n"
							},
							"parameters": [
								{
									"id": 842,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Lower bound of range."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 843,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Upper bound of range."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 214,
							"character": 23
						}
					]
				},
				{
					"id": 813,
					"name": "sin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 814,
							"name": "sin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the sine of a specified angle in degrees.",
								"returns": "Sine of angle.\n"
							},
							"parameters": [
								{
									"id": 815,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Angle in degrees."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 56,
							"character": 19
						}
					]
				},
				{
					"id": 816,
					"name": "tan",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 817,
							"name": "tan",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the tangent of a specified angle in degrees.",
								"returns": "Tangent of angle.\n"
							},
							"parameters": [
								{
									"id": 818,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Angle in degrees."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 68,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						808,
						804,
						806,
						829,
						823,
						810,
						826,
						832,
						835,
						819,
						838,
						844,
						840,
						813,
						816
					]
				}
			],
			"sources": [
				{
					"fileName": "math.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 465,
			"name": "\"model\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/model.ts",
			"comment": {
				"shortText": "Functions for working with models.\nModels are datastructures that contain geometric entities with attributes,\npossibly organised into groups."
			},
			"children": [
				{
					"id": 466,
					"name": "New",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 467,
							"name": "New",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new empty model.",
								"returns": "New model empty if successful, null if unsuccessful or on error\n"
							},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "model.ts",
							"line": 24,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						466
					]
				}
			],
			"sources": [
				{
					"fileName": "model.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 468,
			"name": "\"object\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/object.ts",
			"children": [
				{
					"id": 469,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 470,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets an object from the model",
								"returns": "An object. Null if object does not exist.\n"
							},
							"parameters": [
								{
									"id": 471,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get object from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 472,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID of object to get"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IObj"
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 20,
							"character": 19
						}
					]
				},
				{
					"id": 477,
					"name": "GetFromGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 478,
							"name": "GetFromGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all the objects from a group.",
								"returns": "List of objects.\n"
							},
							"parameters": [
								{
									"id": 479,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get the objects from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 480,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The group name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IObj"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 63,
							"character": 28
						}
					]
				},
				{
					"id": 473,
					"name": "Gets",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 474,
							"name": "Gets",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a list of objects from the model.",
								"returns": "A list of objects.\n"
							},
							"parameters": [
								{
									"id": 475,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get objects from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 476,
									"name": "ids",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "A point ID or list of point IDs, integer numbers. If null, then all objects are returned."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IObj"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 46,
							"character": 20
						}
					]
				},
				{
					"id": 485,
					"name": "addToGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 486,
							"name": "addToGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add objects to a group.",
								"returns": "True if all objects we successfully added.\n"
							},
							"parameters": [
								{
									"id": 487,
									"name": "objs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of objects to add."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IObj"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IObj"
												}
											}
										]
									}
								},
								{
									"id": 488,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 104,
							"character": 26
						}
					]
				},
				{
					"id": 481,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 482,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes object or a list of objects from the model.",
								"returns": "True if all objects we successfully deleted.\n"
							},
							"parameters": [
								{
									"id": 483,
									"name": "objs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Object or list of objects to delete."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IObj"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IObj"
												}
											}
										]
									}
								},
								{
									"id": 484,
									"name": "keep_points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "If false, points that are not used in any other objects will be deleted."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 83,
							"character": 19
						}
					]
				},
				{
					"id": 489,
					"name": "removeFromGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 490,
							"name": "removeFromGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove object from a group.",
								"returns": "True if all objects we successfully removed.\n"
							},
							"parameters": [
								{
									"id": 491,
									"name": "objs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of object to remove."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IObj"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IObj"
												}
											}
										]
									}
								},
								{
									"id": 492,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 122,
							"character": 31
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						469,
						477,
						473,
						485,
						481,
						489
					]
				}
			],
			"sources": [
				{
					"fileName": "object.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 493,
			"name": "\"plane\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/plane.ts",
			"comment": {
				"shortText": "Function for working with planes."
			},
			"children": [
				{
					"id": 498,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 499,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of an existing plane.",
								"returns": "A new plane object.\n"
							},
							"parameters": [
								{
									"id": 500,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The plane object to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 501,
									"name": "copy_attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 41,
							"character": 20
						}
					]
				},
				{
					"id": 502,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 503,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies a plane from one model into another model.",
								"returns": "The copied plane object in the model.\n"
							},
							"parameters": [
								{
									"id": 504,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The model to copy to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 505,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The plane object to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 53,
							"character": 27
						}
					]
				},
				{
					"id": 525,
					"name": "FromCircle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 526,
							"name": "FromCircle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a plane from a circle. The plane will have the same origin and orientation as the circle.",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 527,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The circle to create a plane from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 139,
							"character": 26
						}
					]
				},
				{
					"id": 520,
					"name": "FromOriginPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 521,
							"name": "FromOriginPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a plane from an origin point and two other points on the plane.",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 522,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the origin of plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 523,
									"name": "pt1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, a point on the plane. This will be used to define the plane X axis."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 524,
									"name": "pt2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, a point on the plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 119,
							"character": 32
						}
					]
				},
				{
					"id": 506,
					"name": "FromOriginVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 507,
							"name": "FromOriginVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a plane object from an origin point and two vectors.",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 508,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the origin of plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 509,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "XYZ vector, the x-axis of plane."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 510,
									"name": "vec",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "XYZ vector, a vector in the plane. (This vector must not be co-dir with vec_x.)"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 71,
							"character": 33
						}
					]
				},
				{
					"id": 511,
					"name": "FromOriginXY",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 512,
							"name": "FromOriginXY",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a plane object from an origin point, parallel to the WCS XY plane .",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 513,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the origin of plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 84,
							"character": 28
						}
					]
				},
				{
					"id": 514,
					"name": "FromOriginYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 515,
							"name": "FromOriginYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a plane object from an origin point, parallel to the WCS YZ plane .",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 516,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the origin of plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 95,
							"character": 28
						}
					]
				},
				{
					"id": 517,
					"name": "FromOriginZX",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 518,
							"name": "FromOriginZX",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a plane object from an origin point, parallel to the WCS ZX plane .",
								"returns": "New plane object.\n"
							},
							"parameters": [
								{
									"id": 519,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point object, the origin of plane."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 106,
							"character": 28
						}
					]
				},
				{
					"id": 494,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 495,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a plane from the model based on an ID number.\nIn the viewer, the object label can display (it starts with 'o'), which contains the ID.\nFor example, if the label is \"o123\", then the ID is the number 123.",
								"returns": "The plane object.\n"
							},
							"parameters": [
								{
									"id": 496,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get plane from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 497,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID number of plane."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 30,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						498,
						502,
						525,
						520,
						506,
						511,
						514,
						517,
						494
					]
				}
			],
			"sources": [
				{
					"fileName": "plane.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 551,
			"name": "\"pline\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/pline.ts",
			"comment": {
				"shortText": "Functions for working with polylines."
			},
			"children": [
				{
					"id": 556,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 557,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of a polyline.",
								"returns": "Polyline object.\n"
							},
							"parameters": [
								{
									"id": 558,
									"name": "polyline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The polyline to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 559,
									"name": "copy_attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "If true, attributes are copied to the new circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 45,
							"character": 20
						}
					]
				},
				{
					"id": 560,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 561,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies a polyline from one model into another model.",
								"returns": "The copied polyline object in the model.\n"
							},
							"parameters": [
								{
									"id": 562,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The model to copy to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 563,
									"name": "polyline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The polyline object to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 57,
							"character": 27
						}
					]
				},
				{
					"id": 572,
					"name": "From2Points",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 573,
							"name": "From2Points",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a polyline with a single straight line segment, connecting two points.",
								"returns": "Polyline object.\n"
							},
							"parameters": [
								{
									"id": 574,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Start point of line"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 575,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "End point of line."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 107,
							"character": 27
						}
					]
				},
				{
					"id": 568,
					"name": "FromCircle",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 569,
							"name": "FromCircle",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a polyline by dividing a circle or arc into straight line segments.",
								"text": "If it is a circle, then a a closed polyline is returned.\n",
								"returns": "Polyline object.\n"
							},
							"parameters": [
								{
									"id": 570,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle or circular arc to construct polyline from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 571,
									"name": "segments",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number of segments in resulting polyline."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 92,
							"character": 26
						}
					]
				},
				{
					"id": 564,
					"name": "FromPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 565,
							"name": "FromPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a polyline by joining a list of points",
								"text": "Straight line segments are cerated between every two points.\n",
								"returns": "Polyline object.\n"
							},
							"parameters": [
								{
									"id": 566,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A list of points."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								},
								{
									"id": 567,
									"name": "is_closed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "if true,\n     creates a closed polyline object by joining the last point to the first point."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 78,
							"character": 26
						}
					]
				},
				{
					"id": 552,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 553,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a polyline from the model based on an ID number.\nIn the viewer, the object label can display (it starts with 'o'), which contains the ID.\nFor example, if the label is \"o123\", then the ID is the number 123.",
								"returns": "Polyline object.\n"
							},
							"parameters": [
								{
									"id": 554,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get polyline object from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 555,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID number of polyline object."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 33,
							"character": 19
						}
					]
				},
				{
					"id": 595,
					"name": "evalParam",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 596,
							"name": "evalParam",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a point by evaluating the position along a polyline.\nThe position is specified by a t parameter that starts at 0 and ends at 1.\nIf the polyline is closed, 0 and 1 will have the same position.",
								"returns": "Point.\n"
							},
							"parameters": [
								{
									"id": 597,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to evaluate."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 598,
									"name": "t",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Parameter to evaluate (0 is the start of the polyline, 1 is the end of the polyline)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 201,
							"character": 25
						}
					]
				},
				{
					"id": 602,
					"name": "explode",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 603,
							"name": "explode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Explodes a polyline into smaller polylines, each with only one segment.\nThe original polyline is not modified.",
								"returns": "List of polylines objects.\n"
							},
							"parameters": [
								{
									"id": 604,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to explode."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPolyline"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 309,
							"character": 23
						}
					]
				},
				{
					"id": 605,
					"name": "extract",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 606,
							"name": "extract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates new polyline by extracting line segments from an existing polyline.\nThe original polyline is not modified.",
								"text": "The individual segments are no joined.\n",
								"returns": "List of new polylines created from extract\n"
							},
							"parameters": [
								{
									"id": 607,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to extract segments from"
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 608,
									"name": "segment_index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index numbers of polyline segments to extract"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPolyline"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 324,
							"character": 23
						}
					]
				},
				{
					"id": 609,
					"name": "extrude",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 610,
							"name": "extrude",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a new polymesh by extruding a polyline by a specified vector.\nThe original polyline is not modified.",
								"text": "New points are created by translating the existing points by the specified vector.\nFour-sided faces are the created between the original and new points.\nThe faces are joined to create a polymesh.\n\nIf cap is true, input pline and moved pline are used as edges to create two polygons. The polygones are\njoined to the polymesh.\n",
								"returns": "Polymesh object.\n"
							},
							"parameters": [
								{
									"id": 611,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to extrude."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 612,
									"name": "vector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing direction and distance of extrusion."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 613,
									"name": "cap",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Closes polymesh by creating a polygon on each end of the extrusion if true."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 355,
							"character": 23
						}
					]
				},
				{
					"id": 592,
					"name": "getEndPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 593,
							"name": "getEndPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the start and end points of a polyline.",
								"returns": "A list with two points, or null if the polyline is closed.\n"
							},
							"parameters": [
								{
									"id": 594,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 181,
							"character": 28
						}
					]
				},
				{
					"id": 589,
					"name": "getPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 590,
							"name": "getPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get all points in a polyline in sequence order.",
								"returns": "A list of points.\n"
							},
							"parameters": [
								{
									"id": 591,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 170,
							"character": 25
						}
					]
				},
				{
					"id": 576,
					"name": "isClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 577,
							"name": "isClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if the polyline is closed.",
								"returns": "True if the polyline is closed.\n"
							},
							"parameters": [
								{
									"id": 578,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 123,
							"character": 24
						}
					]
				},
				{
					"id": 599,
					"name": "join",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 600,
							"name": "join",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Joins polylines with shared end points. The original polylines are deleted.",
								"returns": "List of polyline objects.\n"
							},
							"parameters": [
								{
									"id": 601,
									"name": "plines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of polylines to join."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPolyline"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPolyline"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 215,
							"character": 20
						}
					]
				},
				{
					"id": 614,
					"name": "loft",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 615,
							"name": "loft",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a new polymesh by lofting a list of polylines with equal numbers of segments.\nThe original polylines are not modified.",
								"text": "Four-sided faces are the created between the points of consecutive polylines.\nThe faces are joined to create a polymesh.\n\nThrows an error if polylines do not have the same number of segments\n",
								"returns": "Polymesh object.\n"
							},
							"parameters": [
								{
									"id": 616,
									"name": "plines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of polylines to loft (in order)."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPolyline"
										}
									}
								},
								{
									"id": 617,
									"name": "is_closed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Closes polymesh by lofting back to first polyline if true."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 386,
							"character": 20
						}
					]
				},
				{
					"id": 583,
					"name": "numEdges",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 584,
							"name": "numEdges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of edges in the polyline.",
								"returns": "The number of edges.\n"
							},
							"parameters": [
								{
									"id": 585,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 148,
							"character": 24
						}
					]
				},
				{
					"id": 586,
					"name": "numVertices",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 587,
							"name": "numVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of vertices in the polyline.",
								"returns": "The number of vertices.\n"
							},
							"parameters": [
								{
									"id": 588,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 159,
							"character": 27
						}
					]
				},
				{
					"id": 579,
					"name": "setIsClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 580,
							"name": "setIsClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the polyline to be open or closed.",
								"returns": "True if the value was changed, false otherwise.\n"
							},
							"parameters": [
								{
									"id": 581,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 582,
									"name": "is_closed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "True for closed, false for open."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 135,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						556,
						560,
						572,
						568,
						564,
						552,
						595,
						602,
						605,
						609,
						592,
						589,
						576,
						599,
						614,
						583,
						586,
						579
					]
				}
			],
			"sources": [
				{
					"fileName": "pline.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 618,
			"name": "\"pmesh\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/pmesh.ts",
			"comment": {
				"shortText": "Functions for working with polymehes."
			},
			"children": [
				{
					"id": 623,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 624,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of a polymesh.",
								"returns": "Polymesh object.\n"
							},
							"parameters": [
								{
									"id": 625,
									"name": "polymesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The polymesh to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								},
								{
									"id": 626,
									"name": "copy_attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "If true, attributes are copied to the new circle."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 47,
							"character": 20
						}
					]
				},
				{
					"id": 627,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 628,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies a polymesh from one model into another model.",
								"returns": "The copied polymesh object in the model.\n"
							},
							"parameters": [
								{
									"id": 629,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The model to copy to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 630,
									"name": "polymesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The polymesh object to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 59,
							"character": 27
						}
					]
				},
				{
					"id": 634,
					"name": "FromPline",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 635,
							"name": "FromPline",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a polymesh from a polyline. The polymesh will have a single face.",
								"returns": "Polymesh object with single face.\n"
							},
							"parameters": [
								{
									"id": 636,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object to create the polymesh from."
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 90,
							"character": 25
						}
					]
				},
				{
					"id": 631,
					"name": "FromPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 632,
							"name": "FromPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a polymesh from a list of lists of face corner points.\nFor example [[p1, p2, p3], [p3, p2, p4]] would create a polymesh with two triangular faces.\nIn this example, the two faces share points p2 and p3.",
								"returns": "Polymesh object.\n"
							},
							"parameters": [
								{
									"id": 633,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of lists of face corner points."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "array",
											"elementType": {
												"type": "reference",
												"name": "IPoint"
											}
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 78,
							"character": 26
						}
					]
				},
				{
					"id": 619,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 620,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a polymesh from the model based on an ID number.\nIn the viewer, the object label can display (it starts with 'o'), which contains the ID.\nFor example, if the label is \"o123\", then the ID is the number 123.",
								"returns": "Polymesh object.\n"
							},
							"parameters": [
								{
									"id": 621,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get polymesh from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 622,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID number of polymesh."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 35,
							"character": 19
						}
					]
				},
				{
					"id": 655,
					"name": "extrude",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 656,
							"name": "extrude",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a new polymesh by extruding an existing polymesh by a specified vector.\nThe original polymesh is not modified.",
								"text": "New points are created by translating the existing points by the specified vector.\nFour-sided faces are the created between the original and new points.\nThe faces are joined to create a polymesh.\n",
								"returns": "A polymesh if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 657,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh to extrude."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								},
								{
									"id": 658,
									"name": "vector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The vector defining the extrusion length and direction."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 181,
							"character": 23
						}
					]
				},
				{
					"id": 652,
					"name": "getPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 653,
							"name": "getPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get all points in a polymesh. The sequence of points is in face order.",
								"returns": "List of points.\n"
							},
							"parameters": [
								{
									"id": 654,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 160,
							"character": 25
						}
					]
				},
				{
					"id": 637,
					"name": "isClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 638,
							"name": "isClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if the polymesh is closed.",
								"returns": "True if the polymesh is closed.\n"
							},
							"parameters": [
								{
									"id": 639,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 105,
							"character": 24
						}
					]
				},
				{
					"id": 646,
					"name": "numEdges",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 647,
							"name": "numEdges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of edges in a polymesh, for both the wires and the faces.",
								"returns": "List of two numbers, number of wire edges and number of face edges.\n"
							},
							"parameters": [
								{
									"id": 648,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 138,
							"character": 24
						}
					]
				},
				{
					"id": 640,
					"name": "numFaces",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 641,
							"name": "numFaces",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of faces in a polymesh.",
								"returns": "The number of faces.\n"
							},
							"parameters": [
								{
									"id": 642,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 116,
							"character": 24
						}
					]
				},
				{
					"id": 649,
					"name": "numVertices",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 650,
							"name": "numVertices",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of vertices in the polymesh, for both the wires and the faces.",
								"returns": "List of two numbers, number of wire vertices and number of face vertices.\n"
							},
							"parameters": [
								{
									"id": 651,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 149,
							"character": 27
						}
					]
				},
				{
					"id": 643,
					"name": "numWires",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 644,
							"name": "numWires",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the number of wires in a polymesh.",
								"returns": "The number of wires.\n"
							},
							"parameters": [
								{
									"id": 645,
									"name": "pmesh",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polymesh object."
									},
									"type": {
										"type": "reference",
										"name": "IPolymesh"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 127,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						623,
						627,
						634,
						631,
						619,
						655,
						652,
						637,
						646,
						640,
						649,
						643
					]
				}
			],
			"sources": [
				{
					"fileName": "pmesh.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 659,
			"name": "\"point\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/point.ts",
			"comment": {
				"shortText": "Function for working with points."
			},
			"children": [
				{
					"id": 675,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 676,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copy a point within a model.",
								"returns": "New point.\n"
							},
							"parameters": [
								{
									"id": 677,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point to copy."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 84,
							"character": 20
						}
					]
				},
				{
					"id": 678,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 679,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copy a point from one model into another model.",
								"returns": "The copied plane object in the model.\n"
							},
							"parameters": [
								{
									"id": 680,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The model to copy to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 681,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 96,
							"character": 27
						}
					]
				},
				{
					"id": 690,
					"name": "FromPointsMean",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 691,
							"name": "FromPointsMean",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a point that is at the center of a cluster of points.",
								"returns": "New point if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 692,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of points."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 143,
							"character": 30
						}
					]
				},
				{
					"id": 682,
					"name": "FromXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 683,
							"name": "FromXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a point from XYZ coordinates.",
								"returns": "New point if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 684,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to add points to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 685,
									"name": "xyz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "XYZ coordinates, as a list of three numbers."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 115,
							"character": 23
						}
					]
				},
				{
					"id": 686,
					"name": "FromXYZs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 687,
							"name": "FromXYZs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a list of points from a list of X, Y and Z coordinates.\nPoints are returned in list order.",
								"returns": "New list of points if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 688,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to add points to."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 689,
									"name": "xyzs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A list XYZ coordinates, as a list of lists of three numbers."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "gs.XYZ"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 128,
							"character": 24
						}
					]
				},
				{
					"id": 660,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 661,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a point from a model.",
								"returns": "Point.\n"
							},
							"parameters": [
								{
									"id": 662,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get point from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 663,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID of point to get."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 27,
							"character": 19
						}
					]
				},
				{
					"id": 668,
					"name": "GetFromGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 669,
							"name": "GetFromGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all the points from a group.",
								"returns": "List of points.\n"
							},
							"parameters": [
								{
									"id": 670,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get the points from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 671,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The group name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 55,
							"character": 28
						}
					]
				},
				{
					"id": 672,
					"name": "GetFromObjs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 673,
							"name": "GetFromObjs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a list of unique points for a list of objects.",
								"returns": "List of points.\n"
							},
							"parameters": [
								{
									"id": 674,
									"name": "objs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IObj"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IObj"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 65,
							"character": 27
						}
					]
				},
				{
					"id": 664,
					"name": "Gets",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 665,
							"name": "Gets",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a list of points from the model.",
								"returns": "A list of points.\n"
							},
							"parameters": [
								{
									"id": 666,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get points from."
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 667,
									"name": "ids",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "A point ID or list of point IDs, integer numbers. If null, then all points are returned."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 38,
							"character": 20
						}
					]
				},
				{
					"id": 710,
					"name": "addToGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 711,
							"name": "addToGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add points to a group.",
								"returns": "True if all points we successfully added.\n"
							},
							"parameters": [
								{
									"id": 712,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IPoint"
												}
											},
											{
												"type": "reference",
												"name": "IPoint"
											}
										]
									}
								},
								{
									"id": 713,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 245,
							"character": 26
						}
					]
				},
				{
					"id": 693,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 694,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes a point or a list of points from the model.",
								"returns": "True if successful\n"
							},
							"parameters": [
								{
									"id": 695,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point or list of points to delete."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IPoint"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 165,
							"character": 19
						}
					]
				},
				{
					"id": 696,
					"name": "getXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 697,
							"name": "getXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get the XYZ coordinates of the point.",
								"returns": "The XYZ coordinates if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 698,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point to get coordinates from."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 183,
							"character": 22
						}
					]
				},
				{
					"id": 707,
					"name": "merge",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 708,
							"name": "merge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Merges a cluster of points into a single point.\nThe cluster of points are deletetd and replaced by one new point located at the center of the cluster.\nAll objects in the model that are using those points will be updated.",
								"returns": "New point if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 709,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Cluster of points to merge."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 225,
							"character": 21
						}
					]
				},
				{
					"id": 703,
					"name": "mergeByTol",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 704,
							"name": "mergeByTol",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Merges point or a list of points in the model.",
								"returns": "True if successful, false otherwise.\n"
							},
							"parameters": [
								{
									"id": 705,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point or list of points to delete."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								},
								{
									"id": 706,
									"name": "tolerance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPoint"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 207,
							"character": 26
						}
					]
				},
				{
					"id": 714,
					"name": "removeFromGroup",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 715,
							"name": "removeFromGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove points from a group.",
								"returns": "True if all points we successfully removed.\n"
							},
							"parameters": [
								{
									"id": 716,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "IPoint"
												}
											},
											{
												"type": "reference",
												"name": "IPoint"
											}
										]
									}
								},
								{
									"id": 717,
									"name": "group_name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 265,
							"character": 31
						}
					]
				},
				{
					"id": 699,
					"name": "setXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 700,
							"name": "setXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the XYZ coordinates of the point.",
								"returns": "The old XYZ coordinates if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 701,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point to set coorinates for."
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 702,
									"name": "xyz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The new XYZ coordinates, as a list of three numbers."
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 195,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						675,
						678,
						690,
						682,
						686,
						660,
						668,
						672,
						664,
						710,
						693,
						696,
						707,
						703,
						714,
						699
					]
				}
			],
			"sources": [
				{
					"fileName": "point.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 718,
			"name": "\"query\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/query.ts",
			"comment": {
				"shortText": "Query functions check if an entity fufils certain conditions."
			},
			"children": [
				{
					"id": 719,
					"name": "x",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "query.ts",
							"line": 19,
							"character": 7
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "temp"
					},
					"defaultValue": "\"temp\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						719
					]
				}
			],
			"sources": [
				{
					"fileName": "query.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 720,
			"name": "\"ray\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/ray.ts",
			"children": [
				{
					"id": 725,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 726,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create a copy of a ray.",
								"returns": "A new ray.\n"
							},
							"parameters": [
								{
									"id": 727,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The ray to copy."
									},
									"type": {
										"type": "reference",
										"name": "IRay"
									}
								},
								{
									"id": 728,
									"name": "copy_attribs",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IRay"
							}
						}
					],
					"sources": [
						{
							"fileName": "ray.ts",
							"line": 36,
							"character": 20
						}
					]
				},
				{
					"id": 729,
					"name": "CopyToModel",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 730,
							"name": "CopyToModel",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copies a ray from one model into another model.",
								"returns": "The ray object in the model.\n"
							},
							"parameters": [
								{
									"id": 731,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 732,
									"name": "ray",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The ray object to copy."
									},
									"type": {
										"type": "reference",
										"name": "IRay"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IRay"
							}
						}
					],
					"sources": [
						{
							"fileName": "ray.ts",
							"line": 49,
							"character": 27
						}
					]
				},
				{
					"id": 733,
					"name": "FromOriginVector",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 734,
							"name": "FromOriginVector",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a ray from an origin point and one direction vector describing its direction",
								"returns": "New ray if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 735,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 736,
									"name": "vector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Direction vector describing direction of ray"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IRay"
							}
						}
					],
					"sources": [
						{
							"fileName": "ray.ts",
							"line": 68,
							"character": 32
						}
					]
				},
				{
					"id": 721,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 722,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a ray from the model based on an index number",
								"returns": "Ray object if successful\n"
							},
							"parameters": [
								{
									"id": 723,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get ray from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 724,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of ray"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IRay"
							}
						}
					],
					"sources": [
						{
							"fileName": "ray.ts",
							"line": 19,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						725,
						729,
						733,
						721
					]
				}
			],
			"sources": [
				{
					"fileName": "ray.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 737,
			"name": "\"split\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/split.ts",
			"comment": {
				"shortText": "Functions for splitting geometric objects that insersect with one another."
			},
			"children": [
				{
					"id": 738,
					"name": "circleCircle2D",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 739,
							"name": "circleCircle2D",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Splits two co-planar circles.\nIf an intersection is found, then new arcs will be generated and the old circles will be deleted.\nReturns null if circles are not co-planar.\nReturns null if circles do not intersect.",
								"returns": "Four circle objects (arcs) if successful, null if no intersection was found.\n"
							},
							"parameters": [
								{
									"id": 740,
									"name": "circle1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object, the circle to split."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 741,
									"name": "circle2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle object."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ICircle"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "split.ts",
							"line": 36,
							"character": 30
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						738
					]
				}
			],
			"sources": [
				{
					"fileName": "split.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 848,
			"name": "\"string\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/string.ts",
			"children": [
				{
					"id": 853,
					"name": "endsWith",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 854,
							"name": "endsWith",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string ends with a specified end string.",
								"returns": "True if str ends with search_str, false otherwise.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nresult = String.endsWith(string,\"ge\")<br/></code>\n<br/>Expected value of result is true.\n"
							},
							"parameters": [
								{
									"id": 855,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 856,
									"name": "end_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "End string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 48,
							"character": 24
						}
					]
				},
				{
					"id": 857,
					"name": "includes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 858,
							"name": "includes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string contains a specified search string.",
								"returns": "True if str contains search_str, false otherwise.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nincl = String.includes(string,\"an\")<br/></code>\n<br/>Expected value of incl is true.\n"
							},
							"parameters": [
								{
									"id": 859,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to search."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 860,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 66,
							"character": 24
						}
					]
				},
				{
					"id": 861,
					"name": "len",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 862,
							"name": "len",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of characters in a string.",
								"returns": "Length of string.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nlength = String.len(string)<br/></code>\n<br/>Expected value of length is 6.\n"
							},
							"parameters": [
								{
									"id": 863,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to find length of."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 83,
							"character": 19
						}
					]
				},
				{
					"id": 864,
					"name": "replace",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 865,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Searches for and replaces the specified search string in a string.\nThe search string can also be a regular expression.",
								"returns": "New string with replaced characters.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nnewString = String.Replace(string,\"O\",\"Ar\")<br/></code>\n<br/>Expected value of newString is \"Arrange\".\n"
							},
							"parameters": [
								{
									"id": 866,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 867,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string or regular expression to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 868,
									"name": "new_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Replacement string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 102,
							"character": 23
						}
					]
				},
				{
					"id": 869,
					"name": "search",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 870,
							"name": "search",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position index of the first occurance of the specified search string within a string.\nIf the specified sub-string cannot be found, then returns -1.",
								"returns": "Number that represents position of search_str in str.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsearch = String.search(string,\"e\")<br/></code>\n<br/>Expected value of search is 5.\n"
							},
							"parameters": [
								{
									"id": 871,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 872,
									"name": "search_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Sub-string or regular expression to search for."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 122,
							"character": 22
						}
					]
				},
				{
					"id": 873,
					"name": "split",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 874,
							"name": "split",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Splits a string into a list of substrings using a specified separator string.",
								"returns": "List of substrings.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsplit = String.split(string,\"a\")<br/></code>\n<br/>Expected value of split is [\"Or\",\"nge\"].\n"
							},
							"parameters": [
								{
									"id": 875,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 876,
									"name": "separator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String of characters used to split string."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 140,
							"character": 21
						}
					]
				},
				{
					"id": 849,
					"name": "startsWith",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 850,
							"name": "startsWith",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string starts with the specified start string.",
								"returns": "True if str starts with search_str, false otherwise.\n\n<h3>Example:</h3>\n<code>\nstring = \"Orange\"<br/>\nresult = String.startsWith(string,\"Or\")<br/>\n</code>\n<br/>Expected value of result is true.\n"
							},
							"parameters": [
								{
									"id": 851,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 852,
									"name": "start_str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Start tring."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 30,
							"character": 26
						}
					]
				},
				{
					"id": 877,
					"name": "substring",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 878,
							"name": "substring",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Extracts characters in a string between two specified indices and returns it as a new string.\nStart index is inclusive and end index is exclusive.",
								"returns": "New string with extracted characters.\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsubstring = String.substring(string,1,4)<br/></code>\n<br/>Expected value of ends is \"ran\".\n"
							},
							"parameters": [
								{
									"id": 879,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 880,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index to start extracting characters (inclusive)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 881,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Zero-based index to stop extracting characters (exclusive)."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 160,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						853,
						857,
						861,
						864,
						869,
						873,
						849,
						877
					]
				}
			],
			"sources": [
				{
					"fileName": "string.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 742,
			"name": "\"topo\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "D:/Dropbox/Files/Software/GitHub/gs-modelling/src/typescript/topo.ts",
			"comment": {
				"shortText": "Topology are sub-components within each object that are connected together.<br/>\nTopology consists of vertices, edges, wires and faces.<br/>"
			},
			"children": [
				{
					"id": 743,
					"name": "x",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "topo.ts",
							"line": 24,
							"character": 7
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "temp"
					},
					"defaultValue": "\"temp\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						743
					]
				}
			],
			"sources": [
				{
					"fileName": "topo.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1,
				191,
				287,
				354,
				414,
				931,
				933,
				885,
				906,
				924,
				882,
				430,
				456,
				935,
				202,
				196,
				421,
				528,
				50,
				971,
				744,
				803,
				465,
				468,
				493,
				551,
				618,
				659,
				718,
				720,
				737,
				848,
				742
			]
		}
	]
}