{
	"id": 0,
	"name": "gs-modelling",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "\"attrib\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/attrib.ts",
			"children": [
				{
					"id": 16,
					"name": "Create",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 17,
							"name": "Create",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds an attribute to a model",
								"returns": "New attribute\n"
							},
							"parameters": [
								{
									"id": 18,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to add to"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 19,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Name of new attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 20,
									"name": "geom_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Data type for attribute values. (number, string, boolean, number[], string[], boolean[])"
									},
									"type": {
										"type": "reference",
										"name": "EGeomType"
									}
								},
								{
									"id": 21,
									"name": "data_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EDataType"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IAttrib"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 66,
							"character": 22
						}
					]
				},
				{
					"id": 2,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets attribute that apply for a specified geometry type from a model",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 4,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 5,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The attribute name"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6,
									"name": "geom_type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Type of geometry to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "EGeomType"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IAttrib"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 18,
							"character": 19
						}
					]
				},
				{
					"id": 22,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 23,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes an attribute",
								"returns": "True if successful\n"
							},
							"parameters": [
								{
									"id": 24,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute to delete"
									},
									"type": {
										"type": "reference",
										"name": "IAttrib"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 85,
							"character": 19
						}
					]
				},
				{
					"id": 7,
					"name": "getAll",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 8,
							"name": "getAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all entity attribs",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 9,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IAttrib"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 32,
							"character": 22
						}
					]
				},
				{
					"id": 10,
					"name": "getAllEnts",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 11,
							"name": "getAllEnts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all entity attribs",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 12,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IAttrib"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 41,
							"character": 26
						}
					]
				},
				{
					"id": 13,
					"name": "getAllTopos",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 14,
							"name": "getAllTopos",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets all topo attribs",
								"returns": "List of attributes\n"
							},
							"parameters": [
								{
									"id": 15,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get attribute from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IAttrib"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 50,
							"character": 27
						}
					]
				},
				{
					"id": 32,
					"name": "getEntValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 33,
							"name": "getEntValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the value of a ent attribute for a specified geometry",
								"returns": "Value of attribute\n"
							},
							"parameters": [
								{
									"id": 34,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "IEntAttrib"
									}
								},
								{
									"id": 35,
									"name": "ent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 116,
							"character": 27
						}
					]
				},
				{
					"id": 25,
					"name": "getName",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 26,
							"name": "getName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the name of an attribute",
								"returns": "Name of specified attribute\n"
							},
							"parameters": [
								{
									"id": 27,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute to get name of"
									},
									"type": {
										"type": "reference",
										"name": "IAttrib"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 94,
							"character": 23
						}
					]
				},
				{
					"id": 41,
					"name": "getTopoValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 42,
							"name": "getTopoValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the value of a topo attribute for a specified geometry",
								"returns": "Value of attribute\n"
							},
							"parameters": [
								{
									"id": 43,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "ITopoAttrib"
									}
								},
								{
									"id": 44,
									"name": "topo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "reference",
										"name": "ITopo"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 137,
							"character": 28
						}
					]
				},
				{
					"id": 36,
					"name": "setEntValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 37,
							"name": "setEntValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the value of a ent attribute for a specified geometry",
								"returns": "Old value of specified attribute\n"
							},
							"parameters": [
								{
									"id": 38,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "IEntAttrib"
									}
								},
								{
									"id": 39,
									"name": "ent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											}
										]
									}
								},
								{
									"id": 40,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "New value of attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 127,
							"character": 27
						}
					]
				},
				{
					"id": 28,
					"name": "setName",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 29,
							"name": "setName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the name of an attribute",
								"returns": "Old name of specified attribute\n"
							},
							"parameters": [
								{
									"id": 30,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute to set name"
									},
									"type": {
										"type": "reference",
										"name": "IAttrib"
									}
								},
								{
									"id": 31,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "New name of attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 104,
							"character": 23
						}
					]
				},
				{
					"id": 45,
					"name": "setTopoValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 46,
							"name": "setTopoValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the value of a topo attribute for a specified geometry",
								"returns": "Old value of specified attribute\n"
							},
							"parameters": [
								{
									"id": 47,
									"name": "attrib",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Attribute"
									},
									"type": {
										"type": "reference",
										"name": "ITopoAttrib"
									}
								},
								{
									"id": 48,
									"name": "topo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "reference",
										"name": "ITopo"
									}
								},
								{
									"id": 49,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "New value of attribute"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "attrib.ts",
							"line": 148,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						16,
						2,
						22,
						7,
						10,
						13,
						32,
						25,
						41,
						36,
						28,
						45
					]
				}
			],
			"sources": [
				{
					"fileName": "attrib.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 50,
			"name": "\"circle\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/circle.ts",
			"children": [
				{
					"id": 74,
					"name": "ArcFromOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 75,
							"name": "ArcFromOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed circle to the model based on an origin point and radius",
								"text": "Arc will be constructed parallel to the world XY plane with the specifed origin point as the center\npoint of the arc",
								"returns": "New arc (circle) if successful\n"
							},
							"parameters": [
								{
									"id": 76,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Center point of arc"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 77,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of arc"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 78,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, for start and end of arc."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 100,
							"character": 29
						}
					]
				},
				{
					"id": 68,
					"name": "ArcFromOriginVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 69,
							"name": "ArcFromOriginVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a circle from an origin point and two direction vectors describing the x and y axis",
								"returns": "New circle if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 70,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 71,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing x-axis of plane, and the radius"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 72,
									"name": "vec_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Direction vector describing y-axis of plane"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 73,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, for start and end of arc."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 85,
							"character": 36
						}
					]
				},
				{
					"id": 79,
					"name": "ArcFromPlane",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 80,
							"name": "ArcFromPlane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a circular arc to the model based on a plane and radius",
								"text": "Arc will be constructed parallel to the plane with the origin of the plane as the center point of the\ncircle that forms the arc<br/>\nArc will be constructed starting from the x-axis of the specified plane and follows the circle in the\nspecified direction until it reaches the angle specified",
								"returns": "New arc  (circle) if successful\n"
							},
							"parameters": [
								{
									"id": 81,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plane to construct arc on"
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 82,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of arc"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 83,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, for start and end of arc."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 117,
							"character": 28
						}
					]
				},
				{
					"id": 60,
					"name": "FromOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 61,
							"name": "FromOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed circle to the model based on an origin point and radius",
								"text": "Circle will be constructed parallel to the world XY plane with the specifed origin point as the center\npoint of the circle",
								"returns": "New circle if successful\n"
							},
							"parameters": [
								{
									"id": 62,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Center point of circle"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 63,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of circle"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 53,
							"character": 26
						}
					]
				},
				{
					"id": 55,
					"name": "FromOriginVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 56,
							"name": "FromOriginVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a circle from an origin point and two direction vectors describing the x and y axis",
								"returns": "New circle if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 57,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 58,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing x-axis of plane, and the radius"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 59,
									"name": "vec_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Direction vector describing y-axis of plane"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 40,
							"character": 33
						}
					]
				},
				{
					"id": 64,
					"name": "FromPlane",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 65,
							"name": "FromPlane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed circle to the model based on a plane and radius",
								"text": "Circle will be constructed parallel to the plane with the origin of the plane as the center point of the\ncircle",
								"returns": "New circle if successful\n"
							},
							"parameters": [
								{
									"id": 66,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plane to construct circle on"
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 67,
									"name": "radius",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius of circle"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 66,
							"character": 25
						}
					]
				},
				{
					"id": 51,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 52,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a circle from the model based on an index number",
								"returns": "Circle object if successful\n"
							},
							"parameters": [
								{
									"id": 53,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get circle from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 54,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of circle"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ICircle"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 20,
							"character": 19
						}
					]
				},
				{
					"id": 100,
					"name": "close",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 101,
							"name": "close",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Closes the arc, so that it becomes a circle.",
								"returns": "True if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 102,
									"name": "arc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle to set value for"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 189,
							"character": 21
						}
					]
				},
				{
					"id": 90,
					"name": "getArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 91,
							"name": "getArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the angles for the arc. If this object was previously a closed circle, it will now become an open arc.",
								"returns": "The angles, or null.\n"
							},
							"parameters": [
								{
									"id": 92,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle to get angles from."
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 155,
							"character": 28
						}
					]
				},
				{
					"id": 84,
					"name": "getOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 85,
							"name": "getOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the origin of a Circle",
								"returns": "Origin point of Circle\n"
							},
							"parameters": [
								{
									"id": 86,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle to obtain origin from"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 133,
							"character": 25
						}
					]
				},
				{
					"id": 87,
					"name": "getVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 88,
							"name": "getVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the x and y vectors of a Circle",
								"text": "Direction of x and y vectors reflect the x and y axis of the underlying circle or ellipse of the circle<br/>\nMagnitude of x and y vectors reflect the x and y radius of the underlying circle or ellipse of the circle",
								"returns": "List of x and y vectors of a Circle\n"
							},
							"parameters": [
								{
									"id": 89,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle to obtain vectors from"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "gs.XYZ"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 145,
							"character": 26
						}
					]
				},
				{
					"id": 97,
					"name": "isClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 98,
							"name": "isClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a Circle is closed. If it is not closed, then it must be an arc.",
								"returns": "True if Circle is closed\n"
							},
							"parameters": [
								{
									"id": 99,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle to test"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 179,
							"character": 24
						}
					]
				},
				{
					"id": 103,
					"name": "length",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 104,
							"name": "length",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the length of a Circle",
								"text": "If specified circle is a closed circle or ellipse, returns the circumference of the circle or ellipse",
								"returns": "Length of circle\n"
							},
							"parameters": [
								{
									"id": 105,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle to obtain length from"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 204,
							"character": 22
						}
					]
				},
				{
					"id": 93,
					"name": "setArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 94,
							"name": "setArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the angles for the arc. If this object was previously a closed circle, it will now become an open arc.",
								"returns": "True if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 95,
									"name": "circle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Circle to set value for"
									},
									"type": {
										"type": "reference",
										"name": "ICircle"
									}
								},
								{
									"id": 96,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The value to set"
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "circle.ts",
							"line": 166,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						74,
						68,
						79,
						60,
						55,
						64,
						51,
						100,
						90,
						84,
						87,
						97,
						103,
						93
					]
				}
			],
			"sources": [
				{
					"fileName": "circle.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 106,
			"name": "\"ellipse\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/ellipse.ts",
			"children": [
				{
					"id": 132,
					"name": "ArcFromOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 133,
							"name": "ArcFromOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed ellipse to the model based on an origin point and radius",
								"text": "Arc will be constructed parallel to the world XY plane with the specifed origin point as the center\npoint of the arc",
								"returns": "New ellipse if successful\n"
							},
							"parameters": [
								{
									"id": 134,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Center point of arc"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 135,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 136,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 137,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 102,
							"character": 29
						}
					]
				},
				{
					"id": 126,
					"name": "ArcFromOriginVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 127,
							"name": "ArcFromOriginVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a ellipse from an origin point and two direction vectors describing the x and y axis",
								"returns": "New ellipse if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 128,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 129,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing x-axis of plane, and the x radius"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 130,
									"name": "vec_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing x-axis of plane, and the y radius"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 131,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, for start and end of arc."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 87,
							"character": 36
						}
					]
				},
				{
					"id": 138,
					"name": "ArcFromPlane",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 139,
							"name": "ArcFromPlane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a circular arc to the model based on a plane and radius",
								"text": "Arc will be constructed parallel to the plane with the origin of the plane as the center point of the\nellipse that forms the arc<br/>\nArc will be constructed starting from the x-axis of the specified plane and follows the ellipse in the\nspecified direction until it reaches the angle specified",
								"returns": "New arc  (ellipse) if successful\n"
							},
							"parameters": [
								{
									"id": 140,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plane to construct arc on"
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 141,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 142,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 143,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Two angles between 0 and 360, for start and end of arc."
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 120,
							"character": 28
						}
					]
				},
				{
					"id": 116,
					"name": "FromOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 117,
							"name": "FromOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed ellipse to the model based on an origin point and radius",
								"text": "Ellipse will be constructed parallel to the world XY plane with the specifed origin point as the center\npoint of the ellipse",
								"returns": "New ellipse if successful\n"
							},
							"parameters": [
								{
									"id": 118,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Center point of ellipse"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 119,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 120,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 54,
							"character": 26
						}
					]
				},
				{
					"id": 111,
					"name": "FromOriginVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 112,
							"name": "FromOriginVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a ellipse from an origin point and two direction vectors describing the x and y axis",
								"returns": "New ellipse if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 113,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 114,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing x-axis of plane, and the radius"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 115,
									"name": "vec_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Direction vector describing y-axis of plane"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 40,
							"character": 33
						}
					]
				},
				{
					"id": 121,
					"name": "FromPlane",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 122,
							"name": "FromPlane",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a closed ellipse to the model based on a plane and radius",
								"text": "Ellipse will be constructed parallel to the plane with the origin of the plane as the center point of the\nellipse",
								"returns": "New ellipse if successful\n"
							},
							"parameters": [
								{
									"id": 123,
									"name": "plane",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plane to construct ellipse on"
									},
									"type": {
										"type": "reference",
										"name": "IPlane"
									}
								},
								{
									"id": 124,
									"name": "radius_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius x of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 125,
									"name": "radius_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Radius y of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 68,
							"character": 25
						}
					]
				},
				{
					"id": 107,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 108,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a ellipse from the model based on an index number",
								"returns": "Ellipse object if successful\n"
							},
							"parameters": [
								{
									"id": 109,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get ellipse from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 110,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of ellipse"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IEllipse"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 20,
							"character": 19
						}
					]
				},
				{
					"id": 160,
					"name": "close",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 161,
							"name": "close",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Closes the arc, so that it becomes a ellipse.",
								"returns": "True if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 162,
									"name": "arc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to set value for"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 192,
							"character": 21
						}
					]
				},
				{
					"id": 150,
					"name": "getArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 151,
							"name": "getArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the angles for the arc. If this object was previously a closed ellipse, it will now become an open arc.",
								"returns": "The angles, or null.\n"
							},
							"parameters": [
								{
									"id": 152,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to get angles from."
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 158,
							"character": 28
						}
					]
				},
				{
					"id": 144,
					"name": "getOrigin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 145,
							"name": "getOrigin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the origin of a Ellipse",
								"returns": "Origin point of Ellipse\n"
							},
							"parameters": [
								{
									"id": 146,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to obtain origin from"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 136,
							"character": 25
						}
					]
				},
				{
					"id": 147,
					"name": "getVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 148,
							"name": "getVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the x and y vectors of a Ellipse",
								"text": "Direction of x and y vectors reflect the x and y axis of the underlying ellipse or ellipse of the ellipse<br/>\nMagnitude of x and y vectors reflect the x and y radius of the underlying ellipse or ellipse of the ellipse",
								"returns": "List of x and y vectors of a Ellipse\n"
							},
							"parameters": [
								{
									"id": 149,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to obtain vectors from"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "gs.XYZ"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 148,
							"character": 26
						}
					]
				},
				{
					"id": 157,
					"name": "isClosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 158,
							"name": "isClosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a Ellipse is closed. If it is not closed, then it must be an arc.",
								"returns": "True if Ellipse is closed\n"
							},
							"parameters": [
								{
									"id": 159,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to test"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 182,
							"character": 24
						}
					]
				},
				{
					"id": 163,
					"name": "length",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 164,
							"name": "length",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the length of a Ellipse",
								"text": "If specified ellipse is a closed ellipse or ellipse, returns the circumference of the ellipse or ellipse",
								"returns": "Length of ellipse\n"
							},
							"parameters": [
								{
									"id": 165,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to obtain length from"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 207,
							"character": 22
						}
					]
				},
				{
					"id": 153,
					"name": "setArcAngles",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 154,
							"name": "setArcAngles",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the angles for the arc. If this object was previously a closed ellipse, it will now become an open arc.",
								"returns": "True if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 155,
									"name": "ellipse",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Ellipse to set value for"
									},
									"type": {
										"type": "reference",
										"name": "IEllipse"
									}
								},
								{
									"id": 156,
									"name": "angles",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The value to set"
									},
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "ellipse.ts",
							"line": 169,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						132,
						126,
						138,
						116,
						111,
						121,
						107,
						160,
						150,
						144,
						147,
						157,
						163,
						153
					]
				}
			],
			"sources": [
				{
					"fileName": "ellipse.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 166,
			"name": "\"entity\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/entity.ts",
			"children": [
				{
					"id": 167,
					"name": "getAttribs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 168,
							"name": "getAttribs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets attributes of specified geometry",
								"text": "Returns null if specified geometry does not have any attributes",
								"returns": "List of attributes of specified geometry if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 169,
									"name": "entity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IAttrib"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "entity.ts",
							"line": 23,
							"character": 26
						}
					]
				},
				{
					"id": 170,
					"name": "getGroups",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 171,
							"name": "getGroups",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets groups that contain specified geometry",
								"text": "Returns null if specified geometry is not found in any groups",
								"returns": "List of groups that contain specified geometry if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 172,
									"name": "entity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											}
										]
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IGroup"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "entity.ts",
							"line": 35,
							"character": 25
						}
					]
				},
				{
					"id": 176,
					"name": "move",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 177,
							"name": "move",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Moves geometry or a list of geometry.",
								"text": "Affects geometry that contains or is based off specified geometry",
								"returns": "Geometry in new location if successful\n"
							},
							"parameters": [
								{
									"id": 178,
									"name": "entity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry or list of geometry to move"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											}
										]
									}
								},
								{
									"id": 179,
									"name": "translation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Translation vector"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 180,
									"name": "copy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Performs transformation on duplicate copy of input geometry if true"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "IPoint"
									},
									{
										"type": "reference",
										"name": "IObj"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "entity.ts",
							"line": 62,
							"character": 20
						}
					]
				},
				{
					"id": 173,
					"name": "removeFromAllGroups",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 174,
							"name": "removeFromAllGroups",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes geometry from all groups that contain it",
								"returns": "True if successful\n"
							},
							"parameters": [
								{
									"id": 175,
									"name": "entity",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "entity.ts",
							"line": 45,
							"character": 35
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						167,
						170,
						176,
						173
					]
				}
			],
			"sources": [
				{
					"fileName": "entity.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 181,
			"name": "\"examples\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/examples.ts",
			"comment": {
				"shortText": "These functions call examples for mobius."
			},
			"children": [
				{
					"id": 182,
					"name": "getTorus",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 183,
							"name": "getTorus",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a model containing a torus with two holes.",
								"returns": "The model.\n"
							},
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "examples.ts",
							"line": 15,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						182
					]
				}
			],
			"sources": [
				{
					"fileName": "examples.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 184,
			"name": "\"group\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/group.ts",
			"children": [
				{
					"id": 192,
					"name": "Create",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 193,
							"name": "Create",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a group to a model",
								"returns": "New group\n"
							},
							"parameters": [
								{
									"id": 194,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to add to"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 195,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Name of new group"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IGroup"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 39,
							"character": 22
						}
					]
				},
				{
					"id": 185,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 186,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets groups from a model",
								"returns": "List of groups\n"
							},
							"parameters": [
								{
									"id": 187,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get group from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 188,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IGroup"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 16,
							"character": 19
						}
					]
				},
				{
					"id": 189,
					"name": "GetAll",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 190,
							"name": "GetAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets groups from a model",
								"returns": "List of groups\n"
							},
							"parameters": [
								{
									"id": 191,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get group from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IGroup"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 25,
							"character": 22
						}
					]
				},
				{
					"id": 218,
					"name": "addGeom",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 219,
							"name": "addGeom",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Add geometry to a group",
								"text": "Returns null if objects is already present in group",
								"returns": "True if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 220,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group to add to"
									},
									"type": {
										"type": "reference",
										"name": "IGroup"
									}
								},
								{
									"id": 221,
									"name": "geom",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry to add, can be IPoint, IObj, or ITopo"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											},
											{
												"type": "reference",
												"name": "ITopo"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 125,
							"character": 23
						}
					]
				},
				{
					"id": 196,
					"name": "contains",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 197,
							"name": "contains",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a group contains a specified geometry",
								"returns": "True if group contains geometry, false if group does not contain geometry\n"
							},
							"parameters": [
								{
									"id": 198,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group to check"
									},
									"type": {
										"type": "reference",
										"name": "IGroup"
									}
								},
								{
									"id": 199,
									"name": "geom",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry to check"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IEnt"
											},
											{
												"type": "reference",
												"name": "ITopo"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 53,
							"character": 24
						}
					]
				},
				{
					"id": 200,
					"name": "del",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 201,
							"name": "del",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Deletes a group",
								"returns": "True if successful\n"
							},
							"parameters": [
								{
									"id": 202,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group to delete"
									},
									"type": {
										"type": "reference",
										"name": "IGroup"
									}
								},
								{
									"id": 203,
									"name": "deleteGeom",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Deletes geometry contained in group if true"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 70,
							"character": 19
						}
					]
				},
				{
					"id": 204,
					"name": "getName",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 205,
							"name": "getName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the name of a group",
								"returns": "Name of specified group\n"
							},
							"parameters": [
								{
									"id": 206,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group"
									},
									"type": {
										"type": "reference",
										"name": "IGroup"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 82,
							"character": 23
						}
					]
				},
				{
					"id": 207,
					"name": "getParent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 208,
							"name": "getParent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets the parent group of a group",
								"text": "Returns null if specified group does not have a parent group",
								"returns": "Parent group of specified group if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 209,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group"
									},
									"type": {
										"type": "reference",
										"name": "IGroup"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IGroup"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 93,
							"character": 25
						}
					]
				},
				{
					"id": 222,
					"name": "removeGeom",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 223,
							"name": "removeGeom",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Remove geometry from a group",
								"text": "Returns null if specified geometry cannot be found in specified group",
								"returns": "True if successful, null if unsuccessfull or on error\n"
							},
							"parameters": [
								{
									"id": 224,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group"
									},
									"type": {
										"type": "reference",
										"name": "IGroup"
									}
								},
								{
									"id": 225,
									"name": "geom",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Geometry to remove,  can be IPoint, IObj, or ITopo"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IPoint"
											},
											{
												"type": "reference",
												"name": "IObj"
											},
											{
												"type": "reference",
												"name": "ITopo"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 144,
							"character": 26
						}
					]
				},
				{
					"id": 210,
					"name": "setName",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 211,
							"name": "setName",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the name of a group",
								"returns": "Old name of specified group\n"
							},
							"parameters": [
								{
									"id": 212,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group"
									},
									"type": {
										"type": "reference",
										"name": "IGroup"
									}
								},
								{
									"id": 213,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "New name of group"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 103,
							"character": 23
						}
					]
				},
				{
					"id": 214,
					"name": "setParent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 215,
							"name": "setParent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the parent group of a group",
								"returns": "The old parent.\n"
							},
							"parameters": [
								{
									"id": 216,
									"name": "group",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Group"
									},
									"type": {
										"type": "reference",
										"name": "IGroup"
									}
								},
								{
									"id": 217,
									"name": "parent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "New parent group"
									},
									"type": {
										"type": "reference",
										"name": "IGroup"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IGroup"
							}
						}
					],
					"sources": [
						{
							"fileName": "group.ts",
							"line": 113,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						192,
						185,
						189,
						218,
						196,
						200,
						204,
						207,
						222,
						210,
						214
					]
				}
			],
			"sources": [
				{
					"fileName": "group.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 226,
			"name": "\"intersect\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/intersect.ts",
			"comment": {
				"shortText": "Intersect functions find points of intersection and conics, polylines and polymeshes where two objects\noverlap. They return these intersections and overlaps and do not alter the original input objects."
			},
			"children": [
				{
					"id": 227,
					"name": "x",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "intersect.ts",
							"line": 16,
							"character": 7
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "temp"
					},
					"defaultValue": "\"temp\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						227
					]
				}
			],
			"sources": [
				{
					"fileName": "intersect.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 228,
			"name": "\"list\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/list.ts",
			"comment": {
				"shortText": "Lists are a tool to manage a collection of data.<br/>",
				"text": "Any information can be stored in a list (including other lists) and they are refered to as items.<br/>\nItems in a list are ordered and will be returned in the same order or accessed by the same index unless\nchanges are made to alter it.<br/>\n\nTo create an empty list, use the assignment button and define the value as <code>[]</code><br/>\nTo access an item from a list, use <code>list_name[index_num]</code>. This can also be entered directly\ninto functions.\n"
			},
			"children": [
				{
					"id": 229,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 230,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Duplicates a list",
								"returns": "New duplicated list\n\n<h3>Example:</h3>\n<code>\nlist = [1,2,3]<br/>\ncopy = List.Copy(list)</code><br/><br/>\nExpected value of copy is [1,2,3]\n"
							},
							"parameters": [
								{
									"id": 231,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to duplicate"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 35,
							"character": 20
						}
					]
				},
				{
					"id": 232,
					"name": "FromRange",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 233,
							"name": "FromRange",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new list of integers between two integers",
								"text": "Bottom bound number is inclusive and top bound number is exclusive<br/>",
								"returns": "New list\n\n<h3>Example: </h3>\n<code>\nlist = List.FromRange(0,5)</code><br/><br/>\nExpected value of list is [0,1,2,3,4]\n"
							},
							"parameters": [
								{
									"id": 234,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Bottom bound integer"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 235,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Top bound integer"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 52,
							"character": 25
						}
					]
				},
				{
					"id": 239,
					"name": "append",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 240,
							"name": "append",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds an item to the end of a list",
								"text": "If item is a list, the entire list will be appended as one item<br/>\nAlters original input list",
								"returns": "List with added item\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nappend = List.append(list,4)</code><br/><br/>\nExpected value of list is [1,2,3,4]\n"
							},
							"parameters": [
								{
									"id": 241,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 242,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Item to add"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 90,
							"character": 22
						}
					]
				},
				{
					"id": 243,
					"name": "appendFront",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 244,
							"name": "appendFront",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds an item to the front of a list",
								"text": "If item is a list, the entire list will be appended as one item<br/>\nAlters original input list",
								"returns": "List with added item\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nappend = List.appendFront(list,4)</code><br/><br/>\nExpected value of list is [4,1,2,3]\n"
							},
							"parameters": [
								{
									"id": 245,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 246,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Item to add"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 110,
							"character": 27
						}
					]
				},
				{
					"id": 247,
					"name": "extend",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 248,
							"name": "extend",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds items (from a list) to the end of an list",
								"text": "Items are appended to list individually as seperate items<br/>\nDoes not alter original input list",
								"returns": "List with added items\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nlist2 = [9,0]<br/>\nextend = List.extend(list,list2)</code><br/><br/>\nExpected value of extend is [1,2,3,9,0]\n"
							},
							"parameters": [
								{
									"id": 249,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 250,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of items to add"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 131,
							"character": 22
						}
					]
				},
				{
					"id": 251,
					"name": "extendFront",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 252,
							"name": "extendFront",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds items (from a list) to the front of an list",
								"text": "Items are appended to list individually as seperate items<br/>\nDoes not alter original input list",
								"returns": "List with added items\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nlist2 = [9,0]<br/>\nextend = List.extend(list,list2)</code><br/><br/>\nExpected value of extend is [9,0,1,2,3]\n"
							},
							"parameters": [
								{
									"id": 253,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 254,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of items to add"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 151,
							"character": 27
						}
					]
				},
				{
					"id": 255,
					"name": "flatten",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 256,
							"name": "flatten",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Flattens an n-dimensional list into a one-dimensional list",
								"text": "Alters input list<br/>\nList returned will be in order",
								"returns": "Flattened list\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3,[4,5]]<br/>\nflatten = List.flatten(list)</code><br/><br/>\nExpected value of list is [1,2,3,4,5]\n"
							},
							"parameters": [
								{
									"id": 257,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to flatten"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 169,
							"character": 23
						}
					]
				},
				{
					"id": 236,
					"name": "len",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 237,
							"name": "len",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of items in an list",
								"returns": "Length of specified list\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nlen = List.len(list)</code><br/><br/>\nExpected value of len is 3\n"
							},
							"parameters": [
								{
									"id": 238,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 71,
							"character": 19
						}
					]
				},
				{
					"id": 258,
					"name": "removeIndex",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 259,
							"name": "removeIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes the item with the specified index number from a list",
								"text": "Alters input list",
								"returns": "List with item removed\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nremove = List.removeIndex(list,0)</code><br/><br/>\nExpected value of list is [2,3]\n"
							},
							"parameters": [
								{
									"id": 260,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to remove item from"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 261,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of item to remove"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 187,
							"character": 27
						}
					]
				},
				{
					"id": 262,
					"name": "removeValue",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 263,
							"name": "removeValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes items that match specified value from a list",
								"text": "Alters input list<br/>\nItems must match both the value and type of specified value<br/>\nReturns original list if no items in list match specified value",
								"returns": "List with item removed\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,2,3]<br/>\nremove = List.removeValue(list,2,true)</code><br/><br/>\nExpected value of list is [1,3]\n"
							},
							"parameters": [
								{
									"id": 264,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to remove item from"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 265,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Value to search for"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 266,
									"name": "remove_all",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Removes all instances of specified value if true, removes only the first instance if\n       false"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 210,
							"character": 27
						}
					]
				},
				{
					"id": 267,
					"name": "reverse",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 268,
							"name": "reverse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Reverses the order of items in an list",
								"text": "Alters input list",
								"returns": "New reversed list\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3]<br/>\nreverse = List.reverse(list)</code><br/><br/>\nExpected value of list is [3,2,1]\n"
							},
							"parameters": [
								{
									"id": 269,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to reverse"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 233,
							"character": 23
						}
					]
				},
				{
					"id": 276,
					"name": "slice",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 277,
							"name": "slice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes items with index numbers that fall within a range from a list and return them",
								"text": "Alters input list<br/>\nBottom bound number of range is inclusive, top bound number is exclusive",
								"returns": "List of removed items\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3,4,5]<br/>\nslice = List.slice(list,1,3)</code><br/><br/>\nExpected value of list is [1,4,5]<br/>\nExpected value of slice is [2,3]\n"
							},
							"parameters": [
								{
									"id": 278,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List slice"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 279,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Bottom bound number of range"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 280,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Top bound number of range"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 294,
							"character": 21
						}
					]
				},
				{
					"id": 270,
					"name": "sortAlpha",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 271,
							"name": "sortAlpha",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts a list of strings alphabetically",
								"text": "Alters input list<br/>\nIf items are not strings, they are treated as strings<br/>\nItems are sorted according to string Unicode code points (character by character, numbers before upper case\nalphabets, upper case alphabets before lower case alphabets)",
								"returns": "New sorted list\n\n<h3>Example: </h3>\n<code>\nlist = [\"1\",\"2\",\"10\",\"Orange\",\"apple\"]<br/>\nsort = List.sortAlpha(list)</code><br/><br/>\nExpected value of list is [\"1\",\"10\",\"2\",\"Orange\",\"apple\"]"
							},
							"parameters": [
								{
									"id": 272,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to sort"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 253,
							"character": 25
						}
					]
				},
				{
					"id": 273,
					"name": "sortNum",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 274,
							"name": "sortNum",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sorts a list of numbers in ascending order",
								"text": "Alters input list<br/>\nList must contain numbers",
								"returns": "New sorted list\n\n<h3>Example: </h3>\n<code>\nlist = [56,6,48]<br/>\nsort = List.sortNum(list)</code><br/><br/>\nExpected value of list is [6,48,56]\n"
							},
							"parameters": [
								{
									"id": 275,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to add to"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 272,
							"character": 23
						}
					]
				},
				{
					"id": 281,
					"name": "splice",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 282,
							"name": "splice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds and/or removes items to/from a list at a specific point and returns removed items",
								"text": "Alters input list<br/>\nIf no items to add are specified, only removes items<br/>\nIf howmany specified as 0, only adds items",
								"returns": "List of removed items\n\n<h3>Example: </h3>\n<code>\nlist = [1,2,3,4,5]<br/>\nsplice = List.slice(list,1,2,[9,0])</code><br/><br/>\nExpected value of list is [1,2,9,0,5]<br/>\nExpected value of splice is [3,4]\n"
							},
							"parameters": [
								{
									"id": 283,
									"name": "list",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List to splice"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 284,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of position to add/remove (items added/removed after specified index)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 285,
									"name": "howmany",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number of items to remove"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 286,
									"name": "items",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Items to add"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "list.ts",
							"line": 317,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						229,
						232,
						239,
						243,
						247,
						251,
						255,
						236,
						258,
						262,
						267,
						276,
						270,
						273,
						281
					]
				}
			],
			"sources": [
				{
					"fileName": "list.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 287,
			"name": "\"math\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/math.ts",
			"children": [
				{
					"id": 292,
					"name": "NEG_INFINITY",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 293,
							"name": "NEG_INFINITY",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value of negative infinity",
								"returns": "Value of negative infinity\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 28,
							"character": 28
						}
					]
				},
				{
					"id": 288,
					"name": "PI",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 289,
							"name": "PI",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value of pi",
								"returns": "Value of pi\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 12,
							"character": 18
						}
					]
				},
				{
					"id": 290,
					"name": "POS_INFINITY",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 291,
							"name": "POS_INFINITY",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value of positive infinity",
								"returns": "Value of positive infinity\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 20,
							"character": 28
						}
					]
				},
				{
					"id": 313,
					"name": "abs",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 314,
							"name": "abs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the absolute value of a number",
								"text": "Returns num if num is positive, -num if num is negative and 0 if num=0<br/>",
								"returns": "A number representing the absolute value of the specified number\n\n<h3>Example:</h3>\n<code>\nnum = Math.abs(-5)</code><br/><br/>\nExpected value of num is 5\n"
							},
							"parameters": [
								{
									"id": 315,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 125,
							"character": 19
						}
					]
				},
				{
					"id": 307,
					"name": "ceiling",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 308,
							"name": "ceiling",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rounds a number up to the nearest integer",
								"returns": "A number representing the smallest integer more than or equal to the specified number\n\n<h3>Example:</h3>\n<code>\nnum = Math.ceiling(4.3)</code><br/><br/>\nExpected value of num is 5\n"
							},
							"parameters": [
								{
									"id": 309,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 93,
							"character": 23
						}
					]
				},
				{
					"id": 294,
					"name": "cos",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 295,
							"name": "cos",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the cosine of a specified angle in degrees",
								"returns": "Cosine of angle\n"
							},
							"parameters": [
								{
									"id": 296,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Angle in degrees"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 42,
							"character": 19
						}
					]
				},
				{
					"id": 310,
					"name": "floor",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 311,
							"name": "floor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Rounds a number down to the nearest integer",
								"returns": "A number representing the largest integer less than or equal to the specified number\n\n<h3>Example:</h3>\n<code>\nnum = Math.floor(4.3)</code><br/><br/>\nExpected value of num is 4\n"
							},
							"parameters": [
								{
									"id": 312,
									"name": "num",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Number"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 108,
							"character": 21
						}
					]
				},
				{
					"id": 316,
					"name": "max",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 317,
							"name": "max",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the largest number in a list of numbers",
								"returns": "A number representing the largest number in specified list of numbers\n\n<h3>Example:</h3>\n<code>\nlist = [89,6,1]<br/>\nnum = Math.max(list)</code><br/><br/>\nExpected value of num is 89\n"
							},
							"parameters": [
								{
									"id": 318,
									"name": "nums",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of numbers"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 141,
							"character": 19
						}
					]
				},
				{
					"id": 319,
					"name": "min",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 320,
							"name": "min",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the smallest number in a list of numbers",
								"returns": "A number representing the smallest number in specified list of numbers\n\n<h3>Example:</h3>\n<code>\nlist = [89,6,1]<br/>\nnum = Math.max(list)</code><br/><br/>\nExpected value of num is 1\n"
							},
							"parameters": [
								{
									"id": 321,
									"name": "nums",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 163,
							"character": 19
						}
					]
				},
				{
					"id": 303,
					"name": "pow",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 304,
							"name": "pow",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a number representing the given base taken to the power of the given exponent",
								"returns": "Number representing the given base taken to the power of the given exponent\n\n<h3>Example:</h3>\n<code>\nnum = Math.pow(2,3)</code><br/><br/>\nExpected value of num is 8\n"
							},
							"parameters": [
								{
									"id": 305,
									"name": "base",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Base number"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 306,
									"name": "exponent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Power of exponent"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 78,
							"character": 19
						}
					]
				},
				{
					"id": 322,
					"name": "rand",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 323,
							"name": "rand",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a pseudo-random number between 0 (inclusive) and 1 (exclusive)",
								"text": "Number can be scaled to apply for a larger range",
								"returns": "A pseudo-random number\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 180,
							"character": 20
						}
					]
				},
				{
					"id": 324,
					"name": "randInt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 325,
							"name": "randInt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a pseudo-random integer between two numbers",
								"text": "Bottom bound number is inclusive and top bound number is exclusive",
								"returns": "A pseudo-random number\n"
							},
							"parameters": [
								{
									"id": 326,
									"name": "bottom_bound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Bottom bound number of range"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 327,
									"name": "top_bound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Top bound number of range"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 193,
							"character": 23
						}
					]
				},
				{
					"id": 328,
					"name": "randIntInclusive",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 329,
							"name": "randIntInclusive",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a pseudo-random integer between two numbers",
								"text": "Bottom and top bound numbers are inclusive",
								"returns": "A pseudo-random number\n"
							},
							"parameters": [
								{
									"id": 330,
									"name": "bottom_bound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Bottom bound number of range"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 331,
									"name": "top_bound",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Top bound number of range"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 208,
							"character": 32
						}
					]
				},
				{
					"id": 297,
					"name": "sin",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 298,
							"name": "sin",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the sine of a specified angle in degrees",
								"returns": "Sine of angle\n"
							},
							"parameters": [
								{
									"id": 299,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Angle in degrees"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 52,
							"character": 19
						}
					]
				},
				{
					"id": 300,
					"name": "tan",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 301,
							"name": "tan",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the tangent of a specified angle in degrees",
								"returns": "Tangent of angle\n"
							},
							"parameters": [
								{
									"id": 302,
									"name": "angle",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Angle in degrees"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "math.ts",
							"line": 62,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						292,
						288,
						290,
						313,
						307,
						294,
						310,
						316,
						319,
						303,
						322,
						324,
						328,
						297,
						300
					]
				}
			],
			"sources": [
				{
					"fileName": "math.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 332,
			"name": "\"model\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/model.ts",
			"comment": {
				"shortText": "Models contain geometry that can be viewed on the 3D viewer if output as geometry."
			},
			"children": [
				{
					"id": 336,
					"name": "Load",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 337,
							"name": "Load",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new Model and populates the model with data.",
								"returns": "New model if successful, null if unsuccessful or on error.\n"
							},
							"parameters": [
								{
									"id": 338,
									"name": "filedata",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The file data in gs-json format."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "model.ts",
							"line": 30,
							"character": 20
						}
					]
				},
				{
					"id": 333,
					"name": "New",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 334,
							"name": "New",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new Model that is empty.",
								"returns": "New model empty if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 335,
									"name": "gs_json_data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "IModelData"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IModel"
							}
						}
					],
					"sources": [
						{
							"fileName": "model.ts",
							"line": 21,
							"character": 19
						}
					]
				},
				{
					"id": 339,
					"name": "save",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 340,
							"name": "save",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Save a model to file.",
								"returns": "New model if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 341,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 342,
									"name": "filename",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "model.ts",
							"line": 43,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						336,
						333,
						339
					]
				}
			],
			"sources": [
				{
					"fileName": "model.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 343,
			"name": "\"object\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/object.ts",
			"children": [
				{
					"id": 344,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 345,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets an object from the model",
								"returns": "An object if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 346,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get object from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 347,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "ID of object to get"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IObj"
							}
						}
					],
					"sources": [
						{
							"fileName": "object.ts",
							"line": 19,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						344
					]
				}
			],
			"sources": [
				{
					"fileName": "object.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 348,
			"name": "\"plane\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/plane.ts",
			"children": [
				{
					"id": 349,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 350,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a plane from the model based on an index number",
								"returns": "Plane object if successful\n"
							},
							"parameters": [
								{
									"id": 351,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get polyline from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 352,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of polyline"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 20,
							"character": 19
						}
					]
				},
				{
					"id": 353,
					"name": "_FromOriginVectors",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 354,
							"name": "_FromOriginVectors",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a plane from an origin point and two direction vectors describing the x and y axis",
								"returns": "New plane if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 355,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 356,
									"name": "vec_x",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Direction vector describing x-axis of plane"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 357,
									"name": "vec_y",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Direction vector describing y-axis of plane"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPlane"
							}
						}
					],
					"sources": [
						{
							"fileName": "plane.ts",
							"line": 40,
							"character": 34
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						349,
						353
					]
				}
			],
			"sources": [
				{
					"fileName": "plane.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 358,
			"name": "\"pline\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/pline.ts",
			"children": [
				{
					"id": 363,
					"name": "FromPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 364,
							"name": "FromPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a polyline to the model by joining a list of points",
								"text": "Creates a straight line segment between every two points and joins them to create a polyline",
								"returns": "New polyline object if successful\n"
							},
							"parameters": [
								{
									"id": 365,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "A list of points (in order)"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								},
								{
									"id": 366,
									"name": "is_closed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Creates a closed polyline object by joining the last point to the first point if true"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 45,
							"character": 26
						}
					]
				},
				{
					"id": 359,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 360,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a polyline from the model based on an index number",
								"returns": "Polyline object if successful\n"
							},
							"parameters": [
								{
									"id": 361,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get polyline from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 362,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of polyline"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 21,
							"character": 19
						}
					]
				},
				{
					"id": 367,
					"name": "LineFromPoints",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 368,
							"name": "LineFromPoints",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a straight line to the model from two points",
								"text": "Returns null if both points have the same position",
								"returns": "New polyline object, consisting of a single segment if successful, null if unsuccesful or on error\n"
							},
							"parameters": [
								{
									"id": 369,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Start point of line"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 370,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "End point of line"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 68,
							"character": 30
						}
					]
				},
				{
					"id": 371,
					"name": "evalParam",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 372,
							"name": "evalParam",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a point on a polyline based on a parameter along the polyline",
								"returns": "Point if successful\n"
							},
							"parameters": [
								{
									"id": 373,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to evaluate"
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 374,
									"name": "t",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Parameter to evaluate (0 is the start of the polyline, 1 is the end of the polyline)"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 375,
									"name": "segment_index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The segment of the polyline to evaluate."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": " -1"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 85,
							"character": 25
						}
					]
				},
				{
					"id": 376,
					"name": "explode",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 377,
							"name": "explode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Explodes a polyline into individual segments",
								"text": "Each straight line segment in the polyline is returned as a separate polyline object",
								"returns": "List of new polylines created from explode\n"
							},
							"parameters": [
								{
									"id": 378,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to explode"
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 379,
									"name": "copy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Performs transformation on duplicate copy of input polyline if true"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPolyline"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 103,
							"character": 23
						}
					]
				},
				{
					"id": 380,
					"name": "extend",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 381,
							"name": "extend",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Extends a non-closed polyline by specified distance",
								"text": "Extention is straight and continues in the same direction as the extended segment<br/>\nReturns null if distance is negative",
								"returns": "New polyline object if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 382,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object"
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 383,
									"name": "extrusion_side",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "0 = start, 1 = end, 2 = both"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 384,
									"name": "length",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Distance to extend"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 385,
									"name": "create_points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 386,
									"name": "copy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Performs transformation on duplicate copy of input polyline if true"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolyline"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 120,
							"character": 22
						}
					]
				},
				{
					"id": 387,
					"name": "extract",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 388,
							"name": "extract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Extracts a list of segments from a polyline",
								"text": "Specified straight line segments are removed from the polyline and returned as individual polyline objects<br/>\nThe remainder of the polyline is rejoined as much as possible and returned as one polyline if still intact,\nor multiple polylines if they have been broken up<br/>\nList returned is in order (from t=0 to t=1 of orginal input pline)",
								"returns": "List of new polylines created from extract\n"
							},
							"parameters": [
								{
									"id": 389,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to extract segments from"
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 390,
									"name": "segment_index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index numbers of polyline segments to extract"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 391,
									"name": "copy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Performs transformation on duplicate copy of input polyline if true"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IPolyline"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 157,
							"character": 23
						}
					]
				},
				{
					"id": 392,
					"name": "extrude",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 393,
							"name": "extrude",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Extrudes a polyline according to a specified vector to create a polymesh",
								"text": "Pline is moved by the specified vector and straight line segments are created between the vertices of\nthe input pline and moved pline. The resulting straight line segments and the straight line segments of the\ninput and moved plines are used to define the edges of four-sided polygons. The polygons are joined to\ncreate a polymesh<br/>\n\nIf cap is true, input pline and moved pline are used as edges to create two polygons. The polygones are\njoined to the polymesh from above.",
								"returns": "Polymesh created from extrusion\n"
							},
							"parameters": [
								{
									"id": 394,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to extrude"
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 395,
									"name": "vector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Vector describing direction and distance of extrusion"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								},
								{
									"id": 396,
									"name": "cap",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Closes polymesh by creating a flat polygon on each end of the extrusion if true"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 397,
									"name": "copy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Performs transformation on duplicate copy of input polyline if true"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 188,
							"character": 23
						}
					]
				},
				{
					"id": 398,
					"name": "isCLosed",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 399,
							"name": "isCLosed",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if the polyline is closed",
								"returns": "True if the polyline is closed\n"
							},
							"parameters": [
								{
									"id": 400,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline object"
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 213,
							"character": 24
						}
					]
				},
				{
					"id": 401,
					"name": "loft",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 402,
							"name": "loft",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Lofts a list of polylines with the same number of segments to create a polymesh",
								"text": "Straight line segments are created between the vertices of every two input plines. The resulting\nstraight line segments and the straight line segments of the plines are used to define the edges of\nfour-sided polygons. The polygons created from all the plines are joined to create a polymesh<br/>\n\nReturns null if polylines do not have the same number of segments",
								"returns": "Polymesh created from loft if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 403,
									"name": "plines",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of polylines to loft (in order)"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPolyline"
										}
									}
								},
								{
									"id": 404,
									"name": "is_closed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Closes polymesh by lofting back to first polyline if true"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								},
								{
									"id": 405,
									"name": "copy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Performs transformation on duplicate copy of input polyline if true"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 230,
							"character": 20
						}
					]
				},
				{
					"id": 406,
					"name": "sweep",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 407,
							"name": "sweep",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sweeps a polyline along a specified polyline to create a polymesh",
								"text": "Polyline is used as the cross-section of the polymesh to create",
								"returns": "Polymesh created from sweep\n"
							},
							"parameters": [
								{
									"id": 408,
									"name": "pline",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Polyline to sweep"
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 409,
									"name": "rail",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Rail polyline to sweep along"
									},
									"type": {
										"type": "reference",
										"name": "IPolyline"
									}
								},
								{
									"id": 410,
									"name": "copy",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Performs transformation on duplicate copy of input polyline if true"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pline.ts",
							"line": 279,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						363,
						359,
						367,
						371,
						376,
						380,
						387,
						392,
						398,
						401,
						406
					]
				}
			],
			"sources": [
				{
					"fileName": "pline.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 411,
			"name": "\"pmesh\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/pmesh.ts",
			"children": [
				{
					"id": 412,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 413,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a polymesh from the model based on an index number",
								"returns": "Polymesh object if successful\n"
							},
							"parameters": [
								{
									"id": 414,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get polymesh from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 415,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of polymesh"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPolymesh"
							}
						}
					],
					"sources": [
						{
							"fileName": "pmesh.ts",
							"line": 19,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						412
					]
				}
			],
			"sources": [
				{
					"fileName": "pmesh.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 416,
			"name": "\"point\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/point.ts",
			"children": [
				{
					"id": 421,
					"name": "Copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 422,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Copy a point from one model to another model",
								"text": "If the specified model is the same as the model the point is located in, the specified point is\nduplicated",
								"returns": "Added point in specified model\n"
							},
							"parameters": [
								{
									"id": 423,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to add the point to"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 424,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point to copy in other model"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 38,
							"character": 20
						}
					]
				},
				{
					"id": 429,
					"name": "FromPointsMean",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 430,
							"name": "FromPointsMean",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a point that is the center of a list of points",
								"text": "Calculates the mean of the X, Y and Z coordinates of the list of points and returns a point using the\nresults<br/>\nPoint returned is the three dimensional centroid of the specified list of points<br/>\nIf points inputed are co-planar, this returns their area centroid<br/>\nIf two points are inputed, this returns their mid-point",
								"returns": "New point if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 431,
									"name": "points",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of points"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "IPoint"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 66,
							"character": 30
						}
					]
				},
				{
					"id": 425,
					"name": "FromXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 426,
							"name": "FromXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a point or list of points to the model",
								"text": "X, Y and Z coordinates are assumed to follow the world coordinate system<br/>\nPoints are returned in order of input",
								"returns": "New point or list of points if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 427,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to add point to"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 428,
									"name": "xyz",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "List of X, Y and Z coordinates of point"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 51,
							"character": 23
						}
					]
				},
				{
					"id": 417,
					"name": "GetByID",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 418,
							"name": "GetByID",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a point from the model.",
								"returns": "Specified point if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 419,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get point from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 420,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IPoint"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 19,
							"character": 23
						}
					]
				},
				{
					"id": 432,
					"name": "getXYZ",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 433,
							"name": "getXYZ",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Obtains x, y and z coordinates of 3D point\nhttp://developer.rhino3d.com/api/RhinoScriptSyntax/#geometry-PointCoordinates",
								"returns": "List of x, y and z coordinates of point if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 434,
									"name": "point",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Point"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "gs.XYZ"
							}
						}
					],
					"sources": [
						{
							"fileName": "point.ts",
							"line": 93,
							"character": 22
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						421,
						429,
						425,
						417,
						432
					]
				}
			],
			"sources": [
				{
					"fileName": "point.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 435,
			"name": "\"query\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/query.ts",
			"comment": {
				"shortText": "Query functions check if an entity fufils certain conditions."
			},
			"children": [
				{
					"id": 436,
					"name": "x",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "query.ts",
							"line": 19,
							"character": 7
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "temp"
					},
					"defaultValue": "\"temp\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						436
					]
				}
			],
			"sources": [
				{
					"fileName": "query.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 437,
			"name": "\"ray\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/ray.ts",
			"children": [
				{
					"id": 442,
					"name": "FromOriginVector",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 443,
							"name": "FromOriginVector",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a ray from an origin point and one direction vector describing its direction",
								"returns": "New ray if successful, null if unsuccessful or on error\n"
							},
							"parameters": [
								{
									"id": 444,
									"name": "origin",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "3D point to use as origin of plane"
									},
									"type": {
										"type": "reference",
										"name": "IPoint"
									}
								},
								{
									"id": 445,
									"name": "vector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Direction vector describing direction of ray"
									},
									"type": {
										"type": "reference",
										"name": "gs.XYZ"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IRay"
							}
						}
					],
					"sources": [
						{
							"fileName": "ray.ts",
							"line": 38,
							"character": 32
						}
					]
				},
				{
					"id": 438,
					"name": "Get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 439,
							"name": "Get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Gets a ray from the model based on an index number",
								"returns": "Ray object if successful\n"
							},
							"parameters": [
								{
									"id": 440,
									"name": "model",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Model to get ray from"
									},
									"type": {
										"type": "reference",
										"name": "IModel"
									}
								},
								{
									"id": 441,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index number of ray"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "IRay"
							}
						}
					],
					"sources": [
						{
							"fileName": "ray.ts",
							"line": 19,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						442,
						438
					]
				}
			],
			"sources": [
				{
					"fileName": "ray.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 446,
			"name": "\"split\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/split.ts",
			"comment": {
				"shortText": "Split functions find points of intersection and conics, polylines and polymeshes where two objects\noverlap and split the input objects. They return the split segments, arcs or polymeshes in a list of lists.",
				"text": "<code>[0][i]</code> contains the split parts of the first input, where <code>i</code> is the index number\nof each individual part obtained from the split function.<br/>\n<code>[1][i]</code> contains the split parts of the second input, if available, where <code>i</code> is the\nindex number of each individual part obtained from the split function.\n"
			},
			"children": [
				{
					"id": 447,
					"name": "x",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "split.ts",
							"line": 29,
							"character": 7
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "temp"
					},
					"defaultValue": "\"temp\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						447
					]
				}
			],
			"sources": [
				{
					"fileName": "split.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 448,
			"name": "\"string\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/string.ts",
			"comment": {
				"shortText": "Strings are a type of data that contains text in the form of alphanumeric characters and symbols.<br/>",
				"text": "They are enclosed in quotation marks.<br/>\nRegular expressions can also be used to search for character matches in strings.\n"
			},
			"children": [
				{
					"id": 449,
					"name": "endsWith",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 450,
							"name": "endsWith",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string ends with the characters of a specified string",
								"returns": "True if str_1 ends with str_2, false if str_1 does not end with str_2\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nends = String.endsWith(string,\"e\")<br/></code>\n<br/>Expected value of ends is true\n"
							},
							"parameters": [
								{
									"id": 451,
									"name": "str_1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 452,
									"name": "str_2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String of characters to check for"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 29,
							"character": 24
						}
					]
				},
				{
					"id": 453,
					"name": "includes",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 454,
							"name": "includes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if a string contains a specified string of characters",
								"returns": "True if str_1 contains str_2, false if str_1 does not contain str_2\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nincl = String.includes(string,\"an\")<br/></code>\n<br/>Expected value of incl is true\n"
							},
							"parameters": [
								{
									"id": 455,
									"name": "str_1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 456,
									"name": "str_2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to search for"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 44,
							"character": 24
						}
					]
				},
				{
					"id": 457,
					"name": "len",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 458,
							"name": "len",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of characters in a string",
								"returns": "Length of string\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nlength = String.len(string)<br/></code>\n<br/>Expected value of length is 6\n"
							},
							"parameters": [
								{
									"id": 459,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to find length of"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 58,
							"character": 19
						}
					]
				},
				{
					"id": 460,
					"name": "replace",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 461,
							"name": "replace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Searches for a specified string of characters in a string and replaces them with another specified string\nof characters",
								"text": "To perfrom a case-insensitive search, use <code>/string/i</code> instead of <code>\"string\"</code> in search",
								"returns": "New string with replaced characters\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nnewString = String.Replace(string,\"O\",\"Ar\")<br/></code>\n<br/>Expected value of newString is \"Arrange\"\n"
							},
							"parameters": [
								{
									"id": 462,
									"name": "str_1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 463,
									"name": "str_2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to search for"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 464,
									"name": "str_3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to replace search value with"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 77,
							"character": 23
						}
					]
				},
				{
					"id": 465,
					"name": "search",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 466,
							"name": "search",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the position index of where a specified string of characters can be found within a string",
								"text": "If specified string of characters cannot be found, returns -1",
								"returns": "Number that represents position of str_1 in str_2\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsearch = String.search(string,\"e\")<br/></code>\n<br/>Expected value of search is 5\n"
							},
							"parameters": [
								{
									"id": 467,
									"name": "str_1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 468,
									"name": "str_2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String of characters to check for"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 94,
							"character": 22
						}
					]
				},
				{
					"id": 469,
					"name": "split",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 470,
							"name": "split",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Splits a string into a list of substrings using a specified string of characters as a separator",
								"returns": "List of substrings\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsplit = String.split(string,\"a\")<br/></code>\n<br/>Expected value of split is [\"Or\",\"nge\"]\n"
							},
							"parameters": [
								{
									"id": 471,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 472,
									"name": "separator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String of characters used to split string"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 109,
							"character": 21
						}
					]
				},
				{
					"id": 473,
					"name": "substring",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 474,
							"name": "substring",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Extracts characters in a string between 2 specified indices and returns it as a new string",
								"text": "Start index is inclusive and end index is exclusive",
								"returns": "New string with extracted characters\n\n<h3>Example:</h3>\n<code>string = \"Orange\"<br/>\nsubstring = String.substring(string,1,4)<br/></code>\n<br/>Expected value of ends is \"ran\"\n"
							},
							"parameters": [
								{
									"id": 475,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "String"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 476,
									"name": "start",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index to start extracting characters"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 477,
									"name": "end",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Index to stop extracting characters"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "string.ts",
							"line": 127,
							"character": 25
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						449,
						453,
						457,
						460,
						465,
						469,
						473
					]
				}
			],
			"sources": [
				{
					"fileName": "string.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 478,
			"name": "\"topo\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "C:/Users/a0115775/Desktop/gs-modelling/src/gs-modelling/lib/topo.ts",
			"comment": {
				"shortText": "Topology are sub-components within each object that are connected together.<br/>\nTopology consists of vertices, edges, wires and faces.<br/>"
			},
			"children": [
				{
					"id": 479,
					"name": "x",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "topo.ts",
							"line": 24,
							"character": 7
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "temp"
					},
					"defaultValue": "\"temp\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						479
					]
				}
			],
			"sources": [
				{
					"fileName": "topo.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1,
				50,
				106,
				166,
				181,
				184,
				226,
				228,
				287,
				332,
				343,
				348,
				358,
				411,
				416,
				435,
				437,
				446,
				448,
				478
			]
		}
	]
}